
LAB_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000175c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08001868  08001868  00002868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800188c  0800188c  0000300c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800188c  0800188c  0000300c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800188c  0800188c  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800188c  0800188c  0000288c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001890  08001890  00002890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001894  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  080018a0  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  080018a0  0000302c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000029d9  00000000  00000000  00003035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000ef0  00000000  00000000  00005a0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003f0  00000000  00000000  00006900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000002cb  00000000  00000000  00006cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000157c1  00000000  00000000  00006fbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000050ea  00000000  00000000  0001c77c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00079b16  00000000  00000000  00021866  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009b37c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000d68  00000000  00000000  0009b3c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  0009c128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001850 	.word	0x08001850

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001850 	.word	0x08001850

0800014c <display_led>:

#include "auto_led.h"
#include "main.h"


void display_led(int num){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	switch (num){
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	3b01      	subs	r3, #1
 8000158:	2b0b      	cmp	r3, #11
 800015a:	f200 8359 	bhi.w	8000810 <display_led+0x6c4>
 800015e:	a201      	add	r2, pc, #4	@ (adr r2, 8000164 <display_led+0x18>)
 8000160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000164:	08000195 	.word	0x08000195
 8000168:	0800021f 	.word	0x0800021f
 800016c:	080002a9 	.word	0x080002a9
 8000170:	08000333 	.word	0x08000333
 8000174:	080003bd 	.word	0x080003bd
 8000178:	08000447 	.word	0x08000447
 800017c:	080004d5 	.word	0x080004d5
 8000180:	0800055f 	.word	0x0800055f
 8000184:	080005e9 	.word	0x080005e9
 8000188:	08000673 	.word	0x08000673
 800018c:	080006fd 	.word	0x080006fd
 8000190:	08000787 	.word	0x08000787
	case 1:
		HAL_GPIO_WritePin(GPIOA, LED1_Pin, 0);
 8000194:	2200      	movs	r2, #0
 8000196:	2110      	movs	r1, #16
 8000198:	48cd      	ldr	r0, [pc, #820]	@ (80004d0 <display_led+0x384>)
 800019a:	f000 ff37 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED2_Pin, 1);
 800019e:	2201      	movs	r2, #1
 80001a0:	2120      	movs	r1, #32
 80001a2:	48cb      	ldr	r0, [pc, #812]	@ (80004d0 <display_led+0x384>)
 80001a4:	f000 ff32 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED3_Pin, 1);
 80001a8:	2201      	movs	r2, #1
 80001aa:	2140      	movs	r1, #64	@ 0x40
 80001ac:	48c8      	ldr	r0, [pc, #800]	@ (80004d0 <display_led+0x384>)
 80001ae:	f000 ff2d 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED4_Pin, 1);
 80001b2:	2201      	movs	r2, #1
 80001b4:	2180      	movs	r1, #128	@ 0x80
 80001b6:	48c6      	ldr	r0, [pc, #792]	@ (80004d0 <display_led+0x384>)
 80001b8:	f000 ff28 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED5_Pin, 1);
 80001bc:	2201      	movs	r2, #1
 80001be:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80001c2:	48c3      	ldr	r0, [pc, #780]	@ (80004d0 <display_led+0x384>)
 80001c4:	f000 ff22 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED6_Pin, 1);
 80001c8:	2201      	movs	r2, #1
 80001ca:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80001ce:	48c0      	ldr	r0, [pc, #768]	@ (80004d0 <display_led+0x384>)
 80001d0:	f000 ff1c 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED7_Pin, 1);
 80001d4:	2201      	movs	r2, #1
 80001d6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80001da:	48bd      	ldr	r0, [pc, #756]	@ (80004d0 <display_led+0x384>)
 80001dc:	f000 ff16 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED8_Pin, 1);
 80001e0:	2201      	movs	r2, #1
 80001e2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80001e6:	48ba      	ldr	r0, [pc, #744]	@ (80004d0 <display_led+0x384>)
 80001e8:	f000 ff10 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED9_Pin, 1);
 80001ec:	2201      	movs	r2, #1
 80001ee:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80001f2:	48b7      	ldr	r0, [pc, #732]	@ (80004d0 <display_led+0x384>)
 80001f4:	f000 ff0a 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED10_Pin, 1);
 80001f8:	2201      	movs	r2, #1
 80001fa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80001fe:	48b4      	ldr	r0, [pc, #720]	@ (80004d0 <display_led+0x384>)
 8000200:	f000 ff04 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED11_Pin, 1);
 8000204:	2201      	movs	r2, #1
 8000206:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800020a:	48b1      	ldr	r0, [pc, #708]	@ (80004d0 <display_led+0x384>)
 800020c:	f000 fefe 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED12_Pin, 1);
 8000210:	2201      	movs	r2, #1
 8000212:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000216:	48ae      	ldr	r0, [pc, #696]	@ (80004d0 <display_led+0x384>)
 8000218:	f000 fef8 	bl	800100c <HAL_GPIO_WritePin>
		break;
 800021c:	e2ff      	b.n	800081e <display_led+0x6d2>
	case 2:
		HAL_GPIO_WritePin(GPIOA, LED1_Pin, 1);
 800021e:	2201      	movs	r2, #1
 8000220:	2110      	movs	r1, #16
 8000222:	48ab      	ldr	r0, [pc, #684]	@ (80004d0 <display_led+0x384>)
 8000224:	f000 fef2 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED2_Pin, 0);
 8000228:	2200      	movs	r2, #0
 800022a:	2120      	movs	r1, #32
 800022c:	48a8      	ldr	r0, [pc, #672]	@ (80004d0 <display_led+0x384>)
 800022e:	f000 feed 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED3_Pin, 1);
 8000232:	2201      	movs	r2, #1
 8000234:	2140      	movs	r1, #64	@ 0x40
 8000236:	48a6      	ldr	r0, [pc, #664]	@ (80004d0 <display_led+0x384>)
 8000238:	f000 fee8 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED4_Pin, 1);
 800023c:	2201      	movs	r2, #1
 800023e:	2180      	movs	r1, #128	@ 0x80
 8000240:	48a3      	ldr	r0, [pc, #652]	@ (80004d0 <display_led+0x384>)
 8000242:	f000 fee3 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED5_Pin, 1);
 8000246:	2201      	movs	r2, #1
 8000248:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800024c:	48a0      	ldr	r0, [pc, #640]	@ (80004d0 <display_led+0x384>)
 800024e:	f000 fedd 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED6_Pin, 1);
 8000252:	2201      	movs	r2, #1
 8000254:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000258:	489d      	ldr	r0, [pc, #628]	@ (80004d0 <display_led+0x384>)
 800025a:	f000 fed7 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED7_Pin, 1);
 800025e:	2201      	movs	r2, #1
 8000260:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000264:	489a      	ldr	r0, [pc, #616]	@ (80004d0 <display_led+0x384>)
 8000266:	f000 fed1 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED8_Pin, 1);
 800026a:	2201      	movs	r2, #1
 800026c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000270:	4897      	ldr	r0, [pc, #604]	@ (80004d0 <display_led+0x384>)
 8000272:	f000 fecb 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED9_Pin, 1);
 8000276:	2201      	movs	r2, #1
 8000278:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800027c:	4894      	ldr	r0, [pc, #592]	@ (80004d0 <display_led+0x384>)
 800027e:	f000 fec5 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED10_Pin, 1);
 8000282:	2201      	movs	r2, #1
 8000284:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000288:	4891      	ldr	r0, [pc, #580]	@ (80004d0 <display_led+0x384>)
 800028a:	f000 febf 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED11_Pin, 1);
 800028e:	2201      	movs	r2, #1
 8000290:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000294:	488e      	ldr	r0, [pc, #568]	@ (80004d0 <display_led+0x384>)
 8000296:	f000 feb9 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED12_Pin, 1);
 800029a:	2201      	movs	r2, #1
 800029c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80002a0:	488b      	ldr	r0, [pc, #556]	@ (80004d0 <display_led+0x384>)
 80002a2:	f000 feb3 	bl	800100c <HAL_GPIO_WritePin>
		break;
 80002a6:	e2ba      	b.n	800081e <display_led+0x6d2>
	case 3:
		HAL_GPIO_WritePin(GPIOA, LED1_Pin, 1);
 80002a8:	2201      	movs	r2, #1
 80002aa:	2110      	movs	r1, #16
 80002ac:	4888      	ldr	r0, [pc, #544]	@ (80004d0 <display_led+0x384>)
 80002ae:	f000 fead 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED2_Pin, 1);
 80002b2:	2201      	movs	r2, #1
 80002b4:	2120      	movs	r1, #32
 80002b6:	4886      	ldr	r0, [pc, #536]	@ (80004d0 <display_led+0x384>)
 80002b8:	f000 fea8 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED3_Pin, 0);
 80002bc:	2200      	movs	r2, #0
 80002be:	2140      	movs	r1, #64	@ 0x40
 80002c0:	4883      	ldr	r0, [pc, #524]	@ (80004d0 <display_led+0x384>)
 80002c2:	f000 fea3 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED4_Pin, 1);
 80002c6:	2201      	movs	r2, #1
 80002c8:	2180      	movs	r1, #128	@ 0x80
 80002ca:	4881      	ldr	r0, [pc, #516]	@ (80004d0 <display_led+0x384>)
 80002cc:	f000 fe9e 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED5_Pin, 1);
 80002d0:	2201      	movs	r2, #1
 80002d2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80002d6:	487e      	ldr	r0, [pc, #504]	@ (80004d0 <display_led+0x384>)
 80002d8:	f000 fe98 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED6_Pin, 1);
 80002dc:	2201      	movs	r2, #1
 80002de:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80002e2:	487b      	ldr	r0, [pc, #492]	@ (80004d0 <display_led+0x384>)
 80002e4:	f000 fe92 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED7_Pin, 1);
 80002e8:	2201      	movs	r2, #1
 80002ea:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80002ee:	4878      	ldr	r0, [pc, #480]	@ (80004d0 <display_led+0x384>)
 80002f0:	f000 fe8c 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED8_Pin, 1);
 80002f4:	2201      	movs	r2, #1
 80002f6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80002fa:	4875      	ldr	r0, [pc, #468]	@ (80004d0 <display_led+0x384>)
 80002fc:	f000 fe86 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED9_Pin, 1);
 8000300:	2201      	movs	r2, #1
 8000302:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000306:	4872      	ldr	r0, [pc, #456]	@ (80004d0 <display_led+0x384>)
 8000308:	f000 fe80 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED10_Pin, 1);
 800030c:	2201      	movs	r2, #1
 800030e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000312:	486f      	ldr	r0, [pc, #444]	@ (80004d0 <display_led+0x384>)
 8000314:	f000 fe7a 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED11_Pin, 1);
 8000318:	2201      	movs	r2, #1
 800031a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800031e:	486c      	ldr	r0, [pc, #432]	@ (80004d0 <display_led+0x384>)
 8000320:	f000 fe74 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED12_Pin, 1);
 8000324:	2201      	movs	r2, #1
 8000326:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800032a:	4869      	ldr	r0, [pc, #420]	@ (80004d0 <display_led+0x384>)
 800032c:	f000 fe6e 	bl	800100c <HAL_GPIO_WritePin>
		break;
 8000330:	e275      	b.n	800081e <display_led+0x6d2>

	case 4:
		HAL_GPIO_WritePin(GPIOA, LED1_Pin, 1);
 8000332:	2201      	movs	r2, #1
 8000334:	2110      	movs	r1, #16
 8000336:	4866      	ldr	r0, [pc, #408]	@ (80004d0 <display_led+0x384>)
 8000338:	f000 fe68 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED2_Pin, 1);
 800033c:	2201      	movs	r2, #1
 800033e:	2120      	movs	r1, #32
 8000340:	4863      	ldr	r0, [pc, #396]	@ (80004d0 <display_led+0x384>)
 8000342:	f000 fe63 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED3_Pin, 1);
 8000346:	2201      	movs	r2, #1
 8000348:	2140      	movs	r1, #64	@ 0x40
 800034a:	4861      	ldr	r0, [pc, #388]	@ (80004d0 <display_led+0x384>)
 800034c:	f000 fe5e 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED4_Pin, 0);
 8000350:	2200      	movs	r2, #0
 8000352:	2180      	movs	r1, #128	@ 0x80
 8000354:	485e      	ldr	r0, [pc, #376]	@ (80004d0 <display_led+0x384>)
 8000356:	f000 fe59 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED5_Pin, 1);
 800035a:	2201      	movs	r2, #1
 800035c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000360:	485b      	ldr	r0, [pc, #364]	@ (80004d0 <display_led+0x384>)
 8000362:	f000 fe53 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED6_Pin, 1);
 8000366:	2201      	movs	r2, #1
 8000368:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800036c:	4858      	ldr	r0, [pc, #352]	@ (80004d0 <display_led+0x384>)
 800036e:	f000 fe4d 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED7_Pin, 1);
 8000372:	2201      	movs	r2, #1
 8000374:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000378:	4855      	ldr	r0, [pc, #340]	@ (80004d0 <display_led+0x384>)
 800037a:	f000 fe47 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED8_Pin, 1);
 800037e:	2201      	movs	r2, #1
 8000380:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000384:	4852      	ldr	r0, [pc, #328]	@ (80004d0 <display_led+0x384>)
 8000386:	f000 fe41 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED9_Pin, 1);
 800038a:	2201      	movs	r2, #1
 800038c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000390:	484f      	ldr	r0, [pc, #316]	@ (80004d0 <display_led+0x384>)
 8000392:	f000 fe3b 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED10_Pin, 1);
 8000396:	2201      	movs	r2, #1
 8000398:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800039c:	484c      	ldr	r0, [pc, #304]	@ (80004d0 <display_led+0x384>)
 800039e:	f000 fe35 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED11_Pin, 1);
 80003a2:	2201      	movs	r2, #1
 80003a4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80003a8:	4849      	ldr	r0, [pc, #292]	@ (80004d0 <display_led+0x384>)
 80003aa:	f000 fe2f 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED12_Pin, 1);
 80003ae:	2201      	movs	r2, #1
 80003b0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80003b4:	4846      	ldr	r0, [pc, #280]	@ (80004d0 <display_led+0x384>)
 80003b6:	f000 fe29 	bl	800100c <HAL_GPIO_WritePin>
		break;
 80003ba:	e230      	b.n	800081e <display_led+0x6d2>
	case 5:
		HAL_GPIO_WritePin(GPIOA, LED1_Pin, 1);
 80003bc:	2201      	movs	r2, #1
 80003be:	2110      	movs	r1, #16
 80003c0:	4843      	ldr	r0, [pc, #268]	@ (80004d0 <display_led+0x384>)
 80003c2:	f000 fe23 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED2_Pin, 1);
 80003c6:	2201      	movs	r2, #1
 80003c8:	2120      	movs	r1, #32
 80003ca:	4841      	ldr	r0, [pc, #260]	@ (80004d0 <display_led+0x384>)
 80003cc:	f000 fe1e 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED3_Pin, 1);
 80003d0:	2201      	movs	r2, #1
 80003d2:	2140      	movs	r1, #64	@ 0x40
 80003d4:	483e      	ldr	r0, [pc, #248]	@ (80004d0 <display_led+0x384>)
 80003d6:	f000 fe19 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED4_Pin, 1);
 80003da:	2201      	movs	r2, #1
 80003dc:	2180      	movs	r1, #128	@ 0x80
 80003de:	483c      	ldr	r0, [pc, #240]	@ (80004d0 <display_led+0x384>)
 80003e0:	f000 fe14 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED5_Pin, 0);
 80003e4:	2200      	movs	r2, #0
 80003e6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80003ea:	4839      	ldr	r0, [pc, #228]	@ (80004d0 <display_led+0x384>)
 80003ec:	f000 fe0e 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED6_Pin, 1);
 80003f0:	2201      	movs	r2, #1
 80003f2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80003f6:	4836      	ldr	r0, [pc, #216]	@ (80004d0 <display_led+0x384>)
 80003f8:	f000 fe08 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED7_Pin, 1);
 80003fc:	2201      	movs	r2, #1
 80003fe:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000402:	4833      	ldr	r0, [pc, #204]	@ (80004d0 <display_led+0x384>)
 8000404:	f000 fe02 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED8_Pin, 1);
 8000408:	2201      	movs	r2, #1
 800040a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800040e:	4830      	ldr	r0, [pc, #192]	@ (80004d0 <display_led+0x384>)
 8000410:	f000 fdfc 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED9_Pin, 1);
 8000414:	2201      	movs	r2, #1
 8000416:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800041a:	482d      	ldr	r0, [pc, #180]	@ (80004d0 <display_led+0x384>)
 800041c:	f000 fdf6 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED10_Pin, 1);
 8000420:	2201      	movs	r2, #1
 8000422:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000426:	482a      	ldr	r0, [pc, #168]	@ (80004d0 <display_led+0x384>)
 8000428:	f000 fdf0 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED11_Pin, 1);
 800042c:	2201      	movs	r2, #1
 800042e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000432:	4827      	ldr	r0, [pc, #156]	@ (80004d0 <display_led+0x384>)
 8000434:	f000 fdea 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED12_Pin, 1);
 8000438:	2201      	movs	r2, #1
 800043a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800043e:	4824      	ldr	r0, [pc, #144]	@ (80004d0 <display_led+0x384>)
 8000440:	f000 fde4 	bl	800100c <HAL_GPIO_WritePin>
		break;
 8000444:	e1eb      	b.n	800081e <display_led+0x6d2>

	case 6:
		HAL_GPIO_WritePin(GPIOA, LED1_Pin, 1);
 8000446:	2201      	movs	r2, #1
 8000448:	2110      	movs	r1, #16
 800044a:	4821      	ldr	r0, [pc, #132]	@ (80004d0 <display_led+0x384>)
 800044c:	f000 fdde 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED2_Pin, 1);
 8000450:	2201      	movs	r2, #1
 8000452:	2120      	movs	r1, #32
 8000454:	481e      	ldr	r0, [pc, #120]	@ (80004d0 <display_led+0x384>)
 8000456:	f000 fdd9 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED3_Pin, 1);
 800045a:	2201      	movs	r2, #1
 800045c:	2140      	movs	r1, #64	@ 0x40
 800045e:	481c      	ldr	r0, [pc, #112]	@ (80004d0 <display_led+0x384>)
 8000460:	f000 fdd4 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED4_Pin, 1);
 8000464:	2201      	movs	r2, #1
 8000466:	2180      	movs	r1, #128	@ 0x80
 8000468:	4819      	ldr	r0, [pc, #100]	@ (80004d0 <display_led+0x384>)
 800046a:	f000 fdcf 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED5_Pin, 1);
 800046e:	2201      	movs	r2, #1
 8000470:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000474:	4816      	ldr	r0, [pc, #88]	@ (80004d0 <display_led+0x384>)
 8000476:	f000 fdc9 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED6_Pin, 0);
 800047a:	2200      	movs	r2, #0
 800047c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000480:	4813      	ldr	r0, [pc, #76]	@ (80004d0 <display_led+0x384>)
 8000482:	f000 fdc3 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED7_Pin, 1);
 8000486:	2201      	movs	r2, #1
 8000488:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800048c:	4810      	ldr	r0, [pc, #64]	@ (80004d0 <display_led+0x384>)
 800048e:	f000 fdbd 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED8_Pin, 1);
 8000492:	2201      	movs	r2, #1
 8000494:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000498:	480d      	ldr	r0, [pc, #52]	@ (80004d0 <display_led+0x384>)
 800049a:	f000 fdb7 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED9_Pin, 1);
 800049e:	2201      	movs	r2, #1
 80004a0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80004a4:	480a      	ldr	r0, [pc, #40]	@ (80004d0 <display_led+0x384>)
 80004a6:	f000 fdb1 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED10_Pin, 1);
 80004aa:	2201      	movs	r2, #1
 80004ac:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004b0:	4807      	ldr	r0, [pc, #28]	@ (80004d0 <display_led+0x384>)
 80004b2:	f000 fdab 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED11_Pin, 1);
 80004b6:	2201      	movs	r2, #1
 80004b8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80004bc:	4804      	ldr	r0, [pc, #16]	@ (80004d0 <display_led+0x384>)
 80004be:	f000 fda5 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED12_Pin, 1);
 80004c2:	2201      	movs	r2, #1
 80004c4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80004c8:	4801      	ldr	r0, [pc, #4]	@ (80004d0 <display_led+0x384>)
 80004ca:	f000 fd9f 	bl	800100c <HAL_GPIO_WritePin>
		break;
 80004ce:	e1a6      	b.n	800081e <display_led+0x6d2>
 80004d0:	40010800 	.word	0x40010800

	case 7:
		HAL_GPIO_WritePin(GPIOA, LED1_Pin, 1);
 80004d4:	2201      	movs	r2, #1
 80004d6:	2110      	movs	r1, #16
 80004d8:	48d3      	ldr	r0, [pc, #844]	@ (8000828 <display_led+0x6dc>)
 80004da:	f000 fd97 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED2_Pin, 1);
 80004de:	2201      	movs	r2, #1
 80004e0:	2120      	movs	r1, #32
 80004e2:	48d1      	ldr	r0, [pc, #836]	@ (8000828 <display_led+0x6dc>)
 80004e4:	f000 fd92 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED3_Pin, 1);
 80004e8:	2201      	movs	r2, #1
 80004ea:	2140      	movs	r1, #64	@ 0x40
 80004ec:	48ce      	ldr	r0, [pc, #824]	@ (8000828 <display_led+0x6dc>)
 80004ee:	f000 fd8d 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED4_Pin, 1);
 80004f2:	2201      	movs	r2, #1
 80004f4:	2180      	movs	r1, #128	@ 0x80
 80004f6:	48cc      	ldr	r0, [pc, #816]	@ (8000828 <display_led+0x6dc>)
 80004f8:	f000 fd88 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED5_Pin, 1);
 80004fc:	2201      	movs	r2, #1
 80004fe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000502:	48c9      	ldr	r0, [pc, #804]	@ (8000828 <display_led+0x6dc>)
 8000504:	f000 fd82 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED6_Pin, 1);
 8000508:	2201      	movs	r2, #1
 800050a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800050e:	48c6      	ldr	r0, [pc, #792]	@ (8000828 <display_led+0x6dc>)
 8000510:	f000 fd7c 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED7_Pin, 0);
 8000514:	2200      	movs	r2, #0
 8000516:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800051a:	48c3      	ldr	r0, [pc, #780]	@ (8000828 <display_led+0x6dc>)
 800051c:	f000 fd76 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED8_Pin, 1);
 8000520:	2201      	movs	r2, #1
 8000522:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000526:	48c0      	ldr	r0, [pc, #768]	@ (8000828 <display_led+0x6dc>)
 8000528:	f000 fd70 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED9_Pin, 1);
 800052c:	2201      	movs	r2, #1
 800052e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000532:	48bd      	ldr	r0, [pc, #756]	@ (8000828 <display_led+0x6dc>)
 8000534:	f000 fd6a 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED10_Pin, 1);
 8000538:	2201      	movs	r2, #1
 800053a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800053e:	48ba      	ldr	r0, [pc, #744]	@ (8000828 <display_led+0x6dc>)
 8000540:	f000 fd64 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED11_Pin, 1);
 8000544:	2201      	movs	r2, #1
 8000546:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800054a:	48b7      	ldr	r0, [pc, #732]	@ (8000828 <display_led+0x6dc>)
 800054c:	f000 fd5e 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED12_Pin, 1);
 8000550:	2201      	movs	r2, #1
 8000552:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000556:	48b4      	ldr	r0, [pc, #720]	@ (8000828 <display_led+0x6dc>)
 8000558:	f000 fd58 	bl	800100c <HAL_GPIO_WritePin>
		break;
 800055c:	e15f      	b.n	800081e <display_led+0x6d2>
	case 8:
		HAL_GPIO_WritePin(GPIOA, LED1_Pin, 1);
 800055e:	2201      	movs	r2, #1
 8000560:	2110      	movs	r1, #16
 8000562:	48b1      	ldr	r0, [pc, #708]	@ (8000828 <display_led+0x6dc>)
 8000564:	f000 fd52 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED2_Pin, 1);
 8000568:	2201      	movs	r2, #1
 800056a:	2120      	movs	r1, #32
 800056c:	48ae      	ldr	r0, [pc, #696]	@ (8000828 <display_led+0x6dc>)
 800056e:	f000 fd4d 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED3_Pin, 1);
 8000572:	2201      	movs	r2, #1
 8000574:	2140      	movs	r1, #64	@ 0x40
 8000576:	48ac      	ldr	r0, [pc, #688]	@ (8000828 <display_led+0x6dc>)
 8000578:	f000 fd48 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED4_Pin, 1);
 800057c:	2201      	movs	r2, #1
 800057e:	2180      	movs	r1, #128	@ 0x80
 8000580:	48a9      	ldr	r0, [pc, #676]	@ (8000828 <display_led+0x6dc>)
 8000582:	f000 fd43 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED5_Pin, 1);
 8000586:	2201      	movs	r2, #1
 8000588:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800058c:	48a6      	ldr	r0, [pc, #664]	@ (8000828 <display_led+0x6dc>)
 800058e:	f000 fd3d 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED6_Pin, 1);
 8000592:	2201      	movs	r2, #1
 8000594:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000598:	48a3      	ldr	r0, [pc, #652]	@ (8000828 <display_led+0x6dc>)
 800059a:	f000 fd37 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED7_Pin, 1);
 800059e:	2201      	movs	r2, #1
 80005a0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80005a4:	48a0      	ldr	r0, [pc, #640]	@ (8000828 <display_led+0x6dc>)
 80005a6:	f000 fd31 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED8_Pin, 0);
 80005aa:	2200      	movs	r2, #0
 80005ac:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80005b0:	489d      	ldr	r0, [pc, #628]	@ (8000828 <display_led+0x6dc>)
 80005b2:	f000 fd2b 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED9_Pin, 1);
 80005b6:	2201      	movs	r2, #1
 80005b8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80005bc:	489a      	ldr	r0, [pc, #616]	@ (8000828 <display_led+0x6dc>)
 80005be:	f000 fd25 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED10_Pin, 1);
 80005c2:	2201      	movs	r2, #1
 80005c4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005c8:	4897      	ldr	r0, [pc, #604]	@ (8000828 <display_led+0x6dc>)
 80005ca:	f000 fd1f 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED11_Pin, 1);
 80005ce:	2201      	movs	r2, #1
 80005d0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005d4:	4894      	ldr	r0, [pc, #592]	@ (8000828 <display_led+0x6dc>)
 80005d6:	f000 fd19 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED12_Pin, 1);
 80005da:	2201      	movs	r2, #1
 80005dc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80005e0:	4891      	ldr	r0, [pc, #580]	@ (8000828 <display_led+0x6dc>)
 80005e2:	f000 fd13 	bl	800100c <HAL_GPIO_WritePin>
		break;
 80005e6:	e11a      	b.n	800081e <display_led+0x6d2>

	case 9:
		HAL_GPIO_WritePin(GPIOA, LED1_Pin, 1);
 80005e8:	2201      	movs	r2, #1
 80005ea:	2110      	movs	r1, #16
 80005ec:	488e      	ldr	r0, [pc, #568]	@ (8000828 <display_led+0x6dc>)
 80005ee:	f000 fd0d 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED2_Pin, 1);
 80005f2:	2201      	movs	r2, #1
 80005f4:	2120      	movs	r1, #32
 80005f6:	488c      	ldr	r0, [pc, #560]	@ (8000828 <display_led+0x6dc>)
 80005f8:	f000 fd08 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED3_Pin, 1);
 80005fc:	2201      	movs	r2, #1
 80005fe:	2140      	movs	r1, #64	@ 0x40
 8000600:	4889      	ldr	r0, [pc, #548]	@ (8000828 <display_led+0x6dc>)
 8000602:	f000 fd03 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED4_Pin, 1);
 8000606:	2201      	movs	r2, #1
 8000608:	2180      	movs	r1, #128	@ 0x80
 800060a:	4887      	ldr	r0, [pc, #540]	@ (8000828 <display_led+0x6dc>)
 800060c:	f000 fcfe 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED5_Pin, 1);
 8000610:	2201      	movs	r2, #1
 8000612:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000616:	4884      	ldr	r0, [pc, #528]	@ (8000828 <display_led+0x6dc>)
 8000618:	f000 fcf8 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED6_Pin, 1);
 800061c:	2201      	movs	r2, #1
 800061e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000622:	4881      	ldr	r0, [pc, #516]	@ (8000828 <display_led+0x6dc>)
 8000624:	f000 fcf2 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED7_Pin, 1);
 8000628:	2201      	movs	r2, #1
 800062a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800062e:	487e      	ldr	r0, [pc, #504]	@ (8000828 <display_led+0x6dc>)
 8000630:	f000 fcec 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED8_Pin, 1);
 8000634:	2201      	movs	r2, #1
 8000636:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800063a:	487b      	ldr	r0, [pc, #492]	@ (8000828 <display_led+0x6dc>)
 800063c:	f000 fce6 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED9_Pin, 0);
 8000640:	2200      	movs	r2, #0
 8000642:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000646:	4878      	ldr	r0, [pc, #480]	@ (8000828 <display_led+0x6dc>)
 8000648:	f000 fce0 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED10_Pin, 1);
 800064c:	2201      	movs	r2, #1
 800064e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000652:	4875      	ldr	r0, [pc, #468]	@ (8000828 <display_led+0x6dc>)
 8000654:	f000 fcda 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED11_Pin, 1);
 8000658:	2201      	movs	r2, #1
 800065a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800065e:	4872      	ldr	r0, [pc, #456]	@ (8000828 <display_led+0x6dc>)
 8000660:	f000 fcd4 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED12_Pin, 1);
 8000664:	2201      	movs	r2, #1
 8000666:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800066a:	486f      	ldr	r0, [pc, #444]	@ (8000828 <display_led+0x6dc>)
 800066c:	f000 fcce 	bl	800100c <HAL_GPIO_WritePin>
		break;
 8000670:	e0d5      	b.n	800081e <display_led+0x6d2>

	case 10:
		HAL_GPIO_WritePin(GPIOA, LED1_Pin, 1);
 8000672:	2201      	movs	r2, #1
 8000674:	2110      	movs	r1, #16
 8000676:	486c      	ldr	r0, [pc, #432]	@ (8000828 <display_led+0x6dc>)
 8000678:	f000 fcc8 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED2_Pin, 1);
 800067c:	2201      	movs	r2, #1
 800067e:	2120      	movs	r1, #32
 8000680:	4869      	ldr	r0, [pc, #420]	@ (8000828 <display_led+0x6dc>)
 8000682:	f000 fcc3 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED3_Pin, 1);
 8000686:	2201      	movs	r2, #1
 8000688:	2140      	movs	r1, #64	@ 0x40
 800068a:	4867      	ldr	r0, [pc, #412]	@ (8000828 <display_led+0x6dc>)
 800068c:	f000 fcbe 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED4_Pin, 1);
 8000690:	2201      	movs	r2, #1
 8000692:	2180      	movs	r1, #128	@ 0x80
 8000694:	4864      	ldr	r0, [pc, #400]	@ (8000828 <display_led+0x6dc>)
 8000696:	f000 fcb9 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED5_Pin, 1);
 800069a:	2201      	movs	r2, #1
 800069c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006a0:	4861      	ldr	r0, [pc, #388]	@ (8000828 <display_led+0x6dc>)
 80006a2:	f000 fcb3 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED6_Pin, 1);
 80006a6:	2201      	movs	r2, #1
 80006a8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80006ac:	485e      	ldr	r0, [pc, #376]	@ (8000828 <display_led+0x6dc>)
 80006ae:	f000 fcad 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED7_Pin, 1);
 80006b2:	2201      	movs	r2, #1
 80006b4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80006b8:	485b      	ldr	r0, [pc, #364]	@ (8000828 <display_led+0x6dc>)
 80006ba:	f000 fca7 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED8_Pin, 1);
 80006be:	2201      	movs	r2, #1
 80006c0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80006c4:	4858      	ldr	r0, [pc, #352]	@ (8000828 <display_led+0x6dc>)
 80006c6:	f000 fca1 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED9_Pin, 1);
 80006ca:	2201      	movs	r2, #1
 80006cc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006d0:	4855      	ldr	r0, [pc, #340]	@ (8000828 <display_led+0x6dc>)
 80006d2:	f000 fc9b 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED10_Pin, 0);
 80006d6:	2200      	movs	r2, #0
 80006d8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006dc:	4852      	ldr	r0, [pc, #328]	@ (8000828 <display_led+0x6dc>)
 80006de:	f000 fc95 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED11_Pin, 1);
 80006e2:	2201      	movs	r2, #1
 80006e4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006e8:	484f      	ldr	r0, [pc, #316]	@ (8000828 <display_led+0x6dc>)
 80006ea:	f000 fc8f 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED12_Pin, 1);
 80006ee:	2201      	movs	r2, #1
 80006f0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80006f4:	484c      	ldr	r0, [pc, #304]	@ (8000828 <display_led+0x6dc>)
 80006f6:	f000 fc89 	bl	800100c <HAL_GPIO_WritePin>
		break;
 80006fa:	e090      	b.n	800081e <display_led+0x6d2>

	case 11:
		HAL_GPIO_WritePin(GPIOA, LED1_Pin, 1);
 80006fc:	2201      	movs	r2, #1
 80006fe:	2110      	movs	r1, #16
 8000700:	4849      	ldr	r0, [pc, #292]	@ (8000828 <display_led+0x6dc>)
 8000702:	f000 fc83 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED2_Pin, 1);
 8000706:	2201      	movs	r2, #1
 8000708:	2120      	movs	r1, #32
 800070a:	4847      	ldr	r0, [pc, #284]	@ (8000828 <display_led+0x6dc>)
 800070c:	f000 fc7e 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED3_Pin, 1);
 8000710:	2201      	movs	r2, #1
 8000712:	2140      	movs	r1, #64	@ 0x40
 8000714:	4844      	ldr	r0, [pc, #272]	@ (8000828 <display_led+0x6dc>)
 8000716:	f000 fc79 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED4_Pin, 1);
 800071a:	2201      	movs	r2, #1
 800071c:	2180      	movs	r1, #128	@ 0x80
 800071e:	4842      	ldr	r0, [pc, #264]	@ (8000828 <display_led+0x6dc>)
 8000720:	f000 fc74 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED5_Pin, 1);
 8000724:	2201      	movs	r2, #1
 8000726:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800072a:	483f      	ldr	r0, [pc, #252]	@ (8000828 <display_led+0x6dc>)
 800072c:	f000 fc6e 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED6_Pin, 1);
 8000730:	2201      	movs	r2, #1
 8000732:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000736:	483c      	ldr	r0, [pc, #240]	@ (8000828 <display_led+0x6dc>)
 8000738:	f000 fc68 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED7_Pin, 1);
 800073c:	2201      	movs	r2, #1
 800073e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000742:	4839      	ldr	r0, [pc, #228]	@ (8000828 <display_led+0x6dc>)
 8000744:	f000 fc62 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED8_Pin, 1);
 8000748:	2201      	movs	r2, #1
 800074a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800074e:	4836      	ldr	r0, [pc, #216]	@ (8000828 <display_led+0x6dc>)
 8000750:	f000 fc5c 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED9_Pin, 1);
 8000754:	2201      	movs	r2, #1
 8000756:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800075a:	4833      	ldr	r0, [pc, #204]	@ (8000828 <display_led+0x6dc>)
 800075c:	f000 fc56 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED10_Pin, 1);
 8000760:	2201      	movs	r2, #1
 8000762:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000766:	4830      	ldr	r0, [pc, #192]	@ (8000828 <display_led+0x6dc>)
 8000768:	f000 fc50 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED11_Pin, 0);
 800076c:	2200      	movs	r2, #0
 800076e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000772:	482d      	ldr	r0, [pc, #180]	@ (8000828 <display_led+0x6dc>)
 8000774:	f000 fc4a 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED12_Pin, 1);
 8000778:	2201      	movs	r2, #1
 800077a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800077e:	482a      	ldr	r0, [pc, #168]	@ (8000828 <display_led+0x6dc>)
 8000780:	f000 fc44 	bl	800100c <HAL_GPIO_WritePin>
		break;
 8000784:	e04b      	b.n	800081e <display_led+0x6d2>

	case 12:
		HAL_GPIO_WritePin(GPIOA, LED1_Pin, 1);
 8000786:	2201      	movs	r2, #1
 8000788:	2110      	movs	r1, #16
 800078a:	4827      	ldr	r0, [pc, #156]	@ (8000828 <display_led+0x6dc>)
 800078c:	f000 fc3e 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED2_Pin, 1);
 8000790:	2201      	movs	r2, #1
 8000792:	2120      	movs	r1, #32
 8000794:	4824      	ldr	r0, [pc, #144]	@ (8000828 <display_led+0x6dc>)
 8000796:	f000 fc39 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED3_Pin, 1);
 800079a:	2201      	movs	r2, #1
 800079c:	2140      	movs	r1, #64	@ 0x40
 800079e:	4822      	ldr	r0, [pc, #136]	@ (8000828 <display_led+0x6dc>)
 80007a0:	f000 fc34 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED4_Pin, 1);
 80007a4:	2201      	movs	r2, #1
 80007a6:	2180      	movs	r1, #128	@ 0x80
 80007a8:	481f      	ldr	r0, [pc, #124]	@ (8000828 <display_led+0x6dc>)
 80007aa:	f000 fc2f 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED5_Pin, 1);
 80007ae:	2201      	movs	r2, #1
 80007b0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007b4:	481c      	ldr	r0, [pc, #112]	@ (8000828 <display_led+0x6dc>)
 80007b6:	f000 fc29 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED6_Pin, 1);
 80007ba:	2201      	movs	r2, #1
 80007bc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007c0:	4819      	ldr	r0, [pc, #100]	@ (8000828 <display_led+0x6dc>)
 80007c2:	f000 fc23 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED7_Pin, 1);
 80007c6:	2201      	movs	r2, #1
 80007c8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80007cc:	4816      	ldr	r0, [pc, #88]	@ (8000828 <display_led+0x6dc>)
 80007ce:	f000 fc1d 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED8_Pin, 1);
 80007d2:	2201      	movs	r2, #1
 80007d4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80007d8:	4813      	ldr	r0, [pc, #76]	@ (8000828 <display_led+0x6dc>)
 80007da:	f000 fc17 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED9_Pin, 1);
 80007de:	2201      	movs	r2, #1
 80007e0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80007e4:	4810      	ldr	r0, [pc, #64]	@ (8000828 <display_led+0x6dc>)
 80007e6:	f000 fc11 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED10_Pin, 1);
 80007ea:	2201      	movs	r2, #1
 80007ec:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007f0:	480d      	ldr	r0, [pc, #52]	@ (8000828 <display_led+0x6dc>)
 80007f2:	f000 fc0b 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED11_Pin, 1);
 80007f6:	2201      	movs	r2, #1
 80007f8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007fc:	480a      	ldr	r0, [pc, #40]	@ (8000828 <display_led+0x6dc>)
 80007fe:	f000 fc05 	bl	800100c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED12_Pin, 0);
 8000802:	2200      	movs	r2, #0
 8000804:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000808:	4807      	ldr	r0, [pc, #28]	@ (8000828 <display_led+0x6dc>)
 800080a:	f000 fbff 	bl	800100c <HAL_GPIO_WritePin>
		break;
 800080e:	e006      	b.n	800081e <display_led+0x6d2>
	default: HAL_GPIO_WritePin(GPIOA, LED1_Pin | LED2_Pin | LED3_Pin | LED4_Pin |
 8000810:	2200      	movs	r2, #0
 8000812:	f64f 71f0 	movw	r1, #65520	@ 0xfff0
 8000816:	4804      	ldr	r0, [pc, #16]	@ (8000828 <display_led+0x6dc>)
 8000818:	f000 fbf8 	bl	800100c <HAL_GPIO_WritePin>
			LED5_Pin | LED6_Pin | LED7_Pin | LED8_Pin | LED9_Pin | LED10_Pin | LED11_Pin | LED12_Pin, 0);
	break;
 800081c:	bf00      	nop

	}
}
 800081e:	bf00      	nop
 8000820:	3708      	adds	r7, #8
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40010800 	.word	0x40010800

0800082c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000832:	f000 f905 	bl	8000a40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000836:	f000 f813 	bl	8000860 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800083a:	f000 f84d 	bl	80008d8 <MX_GPIO_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  for(int counter = 1; counter <=12; counter ++){
 800083e:	2301      	movs	r3, #1
 8000840:	607b      	str	r3, [r7, #4]
 8000842:	e009      	b.n	8000858 <main+0x2c>
	  		  display_led(counter);
 8000844:	6878      	ldr	r0, [r7, #4]
 8000846:	f7ff fc81 	bl	800014c <display_led>
	  		  HAL_Delay(1000);
 800084a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800084e:	f000 f959 	bl	8000b04 <HAL_Delay>
	  for(int counter = 1; counter <=12; counter ++){
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	3301      	adds	r3, #1
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	2b0c      	cmp	r3, #12
 800085c:	ddf2      	ble.n	8000844 <main+0x18>
 800085e:	e7ee      	b.n	800083e <main+0x12>

08000860 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b090      	sub	sp, #64	@ 0x40
 8000864:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000866:	f107 0318 	add.w	r3, r7, #24
 800086a:	2228      	movs	r2, #40	@ 0x28
 800086c:	2100      	movs	r1, #0
 800086e:	4618      	mov	r0, r3
 8000870:	f000 ffc2 	bl	80017f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000874:	1d3b      	adds	r3, r7, #4
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]
 800087a:	605a      	str	r2, [r3, #4]
 800087c:	609a      	str	r2, [r3, #8]
 800087e:	60da      	str	r2, [r3, #12]
 8000880:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000882:	2302      	movs	r3, #2
 8000884:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000886:	2301      	movs	r3, #1
 8000888:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800088a:	2310      	movs	r3, #16
 800088c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800088e:	2300      	movs	r3, #0
 8000890:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000892:	f107 0318 	add.w	r3, r7, #24
 8000896:	4618      	mov	r0, r3
 8000898:	f000 fbd0 	bl	800103c <HAL_RCC_OscConfig>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80008a2:	f000 f84d 	bl	8000940 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008a6:	230f      	movs	r3, #15
 80008a8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008aa:	2300      	movs	r3, #0
 80008ac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ae:	2300      	movs	r3, #0
 80008b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008b2:	2300      	movs	r3, #0
 80008b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008b6:	2300      	movs	r3, #0
 80008b8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008ba:	1d3b      	adds	r3, r7, #4
 80008bc:	2100      	movs	r1, #0
 80008be:	4618      	mov	r0, r3
 80008c0:	f000 fe3e 	bl	8001540 <HAL_RCC_ClockConfig>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80008ca:	f000 f839 	bl	8000940 <Error_Handler>
  }
}
 80008ce:	bf00      	nop
 80008d0:	3740      	adds	r7, #64	@ 0x40
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
	...

080008d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b086      	sub	sp, #24
 80008dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008de:	f107 0308 	add.w	r3, r7, #8
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
 80008e6:	605a      	str	r2, [r3, #4]
 80008e8:	609a      	str	r2, [r3, #8]
 80008ea:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ec:	4b12      	ldr	r3, [pc, #72]	@ (8000938 <MX_GPIO_Init+0x60>)
 80008ee:	699b      	ldr	r3, [r3, #24]
 80008f0:	4a11      	ldr	r2, [pc, #68]	@ (8000938 <MX_GPIO_Init+0x60>)
 80008f2:	f043 0304 	orr.w	r3, r3, #4
 80008f6:	6193      	str	r3, [r2, #24]
 80008f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000938 <MX_GPIO_Init+0x60>)
 80008fa:	699b      	ldr	r3, [r3, #24]
 80008fc:	f003 0304 	and.w	r3, r3, #4
 8000900:	607b      	str	r3, [r7, #4]
 8000902:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 8000904:	2200      	movs	r2, #0
 8000906:	f64f 71f0 	movw	r1, #65520	@ 0xfff0
 800090a:	480c      	ldr	r0, [pc, #48]	@ (800093c <MX_GPIO_Init+0x64>)
 800090c:	f000 fb7e 	bl	800100c <HAL_GPIO_WritePin>
                          |LED9_Pin|LED10_Pin|LED11_Pin|LED12_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED4_Pin
                           LED5_Pin LED6_Pin LED7_Pin LED8_Pin
                           LED9_Pin LED10_Pin LED11_Pin LED12_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 8000910:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 8000914:	60bb      	str	r3, [r7, #8]
                          |LED5_Pin|LED6_Pin|LED7_Pin|LED8_Pin
                          |LED9_Pin|LED10_Pin|LED11_Pin|LED12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000916:	2301      	movs	r3, #1
 8000918:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	2300      	movs	r3, #0
 800091c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091e:	2302      	movs	r3, #2
 8000920:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000922:	f107 0308 	add.w	r3, r7, #8
 8000926:	4619      	mov	r1, r3
 8000928:	4804      	ldr	r0, [pc, #16]	@ (800093c <MX_GPIO_Init+0x64>)
 800092a:	f000 f9f3 	bl	8000d14 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800092e:	bf00      	nop
 8000930:	3718      	adds	r7, #24
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40021000 	.word	0x40021000
 800093c:	40010800 	.word	0x40010800

08000940 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000944:	b672      	cpsid	i
}
 8000946:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000948:	bf00      	nop
 800094a:	e7fd      	b.n	8000948 <Error_Handler+0x8>

0800094c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000952:	4b0e      	ldr	r3, [pc, #56]	@ (800098c <HAL_MspInit+0x40>)
 8000954:	699b      	ldr	r3, [r3, #24]
 8000956:	4a0d      	ldr	r2, [pc, #52]	@ (800098c <HAL_MspInit+0x40>)
 8000958:	f043 0301 	orr.w	r3, r3, #1
 800095c:	6193      	str	r3, [r2, #24]
 800095e:	4b0b      	ldr	r3, [pc, #44]	@ (800098c <HAL_MspInit+0x40>)
 8000960:	699b      	ldr	r3, [r3, #24]
 8000962:	f003 0301 	and.w	r3, r3, #1
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800096a:	4b08      	ldr	r3, [pc, #32]	@ (800098c <HAL_MspInit+0x40>)
 800096c:	69db      	ldr	r3, [r3, #28]
 800096e:	4a07      	ldr	r2, [pc, #28]	@ (800098c <HAL_MspInit+0x40>)
 8000970:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000974:	61d3      	str	r3, [r2, #28]
 8000976:	4b05      	ldr	r3, [pc, #20]	@ (800098c <HAL_MspInit+0x40>)
 8000978:	69db      	ldr	r3, [r3, #28]
 800097a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800097e:	603b      	str	r3, [r7, #0]
 8000980:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000982:	bf00      	nop
 8000984:	370c      	adds	r7, #12
 8000986:	46bd      	mov	sp, r7
 8000988:	bc80      	pop	{r7}
 800098a:	4770      	bx	lr
 800098c:	40021000 	.word	0x40021000

08000990 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000994:	bf00      	nop
 8000996:	e7fd      	b.n	8000994 <NMI_Handler+0x4>

08000998 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800099c:	bf00      	nop
 800099e:	e7fd      	b.n	800099c <HardFault_Handler+0x4>

080009a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009a4:	bf00      	nop
 80009a6:	e7fd      	b.n	80009a4 <MemManage_Handler+0x4>

080009a8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ac:	bf00      	nop
 80009ae:	e7fd      	b.n	80009ac <BusFault_Handler+0x4>

080009b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009b4:	bf00      	nop
 80009b6:	e7fd      	b.n	80009b4 <UsageFault_Handler+0x4>

080009b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009bc:	bf00      	nop
 80009be:	46bd      	mov	sp, r7
 80009c0:	bc80      	pop	{r7}
 80009c2:	4770      	bx	lr

080009c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009c8:	bf00      	nop
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bc80      	pop	{r7}
 80009ce:	4770      	bx	lr

080009d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009d4:	bf00      	nop
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bc80      	pop	{r7}
 80009da:	4770      	bx	lr

080009dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009e0:	f000 f874 	bl	8000acc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009e4:	bf00      	nop
 80009e6:	bd80      	pop	{r7, pc}

080009e8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bc80      	pop	{r7}
 80009f2:	4770      	bx	lr

080009f4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009f4:	f7ff fff8 	bl	80009e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009f8:	480b      	ldr	r0, [pc, #44]	@ (8000a28 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80009fa:	490c      	ldr	r1, [pc, #48]	@ (8000a2c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80009fc:	4a0c      	ldr	r2, [pc, #48]	@ (8000a30 <LoopFillZerobss+0x16>)
  movs r3, #0
 80009fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a00:	e002      	b.n	8000a08 <LoopCopyDataInit>

08000a02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a06:	3304      	adds	r3, #4

08000a08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a0c:	d3f9      	bcc.n	8000a02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a0e:	4a09      	ldr	r2, [pc, #36]	@ (8000a34 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000a10:	4c09      	ldr	r4, [pc, #36]	@ (8000a38 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a14:	e001      	b.n	8000a1a <LoopFillZerobss>

08000a16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a18:	3204      	adds	r2, #4

08000a1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a1c:	d3fb      	bcc.n	8000a16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a1e:	f000 fef3 	bl	8001808 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a22:	f7ff ff03 	bl	800082c <main>
  bx lr
 8000a26:	4770      	bx	lr
  ldr r0, =_sdata
 8000a28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a2c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a30:	08001894 	.word	0x08001894
  ldr r2, =_sbss
 8000a34:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a38:	2000002c 	.word	0x2000002c

08000a3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a3c:	e7fe      	b.n	8000a3c <ADC1_2_IRQHandler>
	...

08000a40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a44:	4b08      	ldr	r3, [pc, #32]	@ (8000a68 <HAL_Init+0x28>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a07      	ldr	r2, [pc, #28]	@ (8000a68 <HAL_Init+0x28>)
 8000a4a:	f043 0310 	orr.w	r3, r3, #16
 8000a4e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a50:	2003      	movs	r0, #3
 8000a52:	f000 f92b 	bl	8000cac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a56:	200f      	movs	r0, #15
 8000a58:	f000 f808 	bl	8000a6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a5c:	f7ff ff76 	bl	800094c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a60:	2300      	movs	r3, #0
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40022000 	.word	0x40022000

08000a6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a74:	4b12      	ldr	r3, [pc, #72]	@ (8000ac0 <HAL_InitTick+0x54>)
 8000a76:	681a      	ldr	r2, [r3, #0]
 8000a78:	4b12      	ldr	r3, [pc, #72]	@ (8000ac4 <HAL_InitTick+0x58>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a82:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f000 f935 	bl	8000cfa <HAL_SYSTICK_Config>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a96:	2301      	movs	r3, #1
 8000a98:	e00e      	b.n	8000ab8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	2b0f      	cmp	r3, #15
 8000a9e:	d80a      	bhi.n	8000ab6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	6879      	ldr	r1, [r7, #4]
 8000aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa8:	f000 f90b 	bl	8000cc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000aac:	4a06      	ldr	r2, [pc, #24]	@ (8000ac8 <HAL_InitTick+0x5c>)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	e000      	b.n	8000ab8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ab6:	2301      	movs	r3, #1
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	3708      	adds	r7, #8
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	20000000 	.word	0x20000000
 8000ac4:	20000008 	.word	0x20000008
 8000ac8:	20000004 	.word	0x20000004

08000acc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ad0:	4b05      	ldr	r3, [pc, #20]	@ (8000ae8 <HAL_IncTick+0x1c>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	4b05      	ldr	r3, [pc, #20]	@ (8000aec <HAL_IncTick+0x20>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4413      	add	r3, r2
 8000adc:	4a03      	ldr	r2, [pc, #12]	@ (8000aec <HAL_IncTick+0x20>)
 8000ade:	6013      	str	r3, [r2, #0]
}
 8000ae0:	bf00      	nop
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bc80      	pop	{r7}
 8000ae6:	4770      	bx	lr
 8000ae8:	20000008 	.word	0x20000008
 8000aec:	20000028 	.word	0x20000028

08000af0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  return uwTick;
 8000af4:	4b02      	ldr	r3, [pc, #8]	@ (8000b00 <HAL_GetTick+0x10>)
 8000af6:	681b      	ldr	r3, [r3, #0]
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bc80      	pop	{r7}
 8000afe:	4770      	bx	lr
 8000b00:	20000028 	.word	0x20000028

08000b04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b0c:	f7ff fff0 	bl	8000af0 <HAL_GetTick>
 8000b10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b1c:	d005      	beq.n	8000b2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b48 <HAL_Delay+0x44>)
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	461a      	mov	r2, r3
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	4413      	add	r3, r2
 8000b28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b2a:	bf00      	nop
 8000b2c:	f7ff ffe0 	bl	8000af0 <HAL_GetTick>
 8000b30:	4602      	mov	r2, r0
 8000b32:	68bb      	ldr	r3, [r7, #8]
 8000b34:	1ad3      	subs	r3, r2, r3
 8000b36:	68fa      	ldr	r2, [r7, #12]
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	d8f7      	bhi.n	8000b2c <HAL_Delay+0x28>
  {
  }
}
 8000b3c:	bf00      	nop
 8000b3e:	bf00      	nop
 8000b40:	3710      	adds	r7, #16
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	20000008 	.word	0x20000008

08000b4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b085      	sub	sp, #20
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	f003 0307 	and.w	r3, r3, #7
 8000b5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b90 <__NVIC_SetPriorityGrouping+0x44>)
 8000b5e:	68db      	ldr	r3, [r3, #12]
 8000b60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b62:	68ba      	ldr	r2, [r7, #8]
 8000b64:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b68:	4013      	ands	r3, r2
 8000b6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b74:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b7e:	4a04      	ldr	r2, [pc, #16]	@ (8000b90 <__NVIC_SetPriorityGrouping+0x44>)
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	60d3      	str	r3, [r2, #12]
}
 8000b84:	bf00      	nop
 8000b86:	3714      	adds	r7, #20
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bc80      	pop	{r7}
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	e000ed00 	.word	0xe000ed00

08000b94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b98:	4b04      	ldr	r3, [pc, #16]	@ (8000bac <__NVIC_GetPriorityGrouping+0x18>)
 8000b9a:	68db      	ldr	r3, [r3, #12]
 8000b9c:	0a1b      	lsrs	r3, r3, #8
 8000b9e:	f003 0307 	and.w	r3, r3, #7
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bc80      	pop	{r7}
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	e000ed00 	.word	0xe000ed00

08000bb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	6039      	str	r1, [r7, #0]
 8000bba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	db0a      	blt.n	8000bda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	b2da      	uxtb	r2, r3
 8000bc8:	490c      	ldr	r1, [pc, #48]	@ (8000bfc <__NVIC_SetPriority+0x4c>)
 8000bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bce:	0112      	lsls	r2, r2, #4
 8000bd0:	b2d2      	uxtb	r2, r2
 8000bd2:	440b      	add	r3, r1
 8000bd4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bd8:	e00a      	b.n	8000bf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	b2da      	uxtb	r2, r3
 8000bde:	4908      	ldr	r1, [pc, #32]	@ (8000c00 <__NVIC_SetPriority+0x50>)
 8000be0:	79fb      	ldrb	r3, [r7, #7]
 8000be2:	f003 030f 	and.w	r3, r3, #15
 8000be6:	3b04      	subs	r3, #4
 8000be8:	0112      	lsls	r2, r2, #4
 8000bea:	b2d2      	uxtb	r2, r2
 8000bec:	440b      	add	r3, r1
 8000bee:	761a      	strb	r2, [r3, #24]
}
 8000bf0:	bf00      	nop
 8000bf2:	370c      	adds	r7, #12
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bc80      	pop	{r7}
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	e000e100 	.word	0xe000e100
 8000c00:	e000ed00 	.word	0xe000ed00

08000c04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b089      	sub	sp, #36	@ 0x24
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	60f8      	str	r0, [r7, #12]
 8000c0c:	60b9      	str	r1, [r7, #8]
 8000c0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	f003 0307 	and.w	r3, r3, #7
 8000c16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c18:	69fb      	ldr	r3, [r7, #28]
 8000c1a:	f1c3 0307 	rsb	r3, r3, #7
 8000c1e:	2b04      	cmp	r3, #4
 8000c20:	bf28      	it	cs
 8000c22:	2304      	movcs	r3, #4
 8000c24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c26:	69fb      	ldr	r3, [r7, #28]
 8000c28:	3304      	adds	r3, #4
 8000c2a:	2b06      	cmp	r3, #6
 8000c2c:	d902      	bls.n	8000c34 <NVIC_EncodePriority+0x30>
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	3b03      	subs	r3, #3
 8000c32:	e000      	b.n	8000c36 <NVIC_EncodePriority+0x32>
 8000c34:	2300      	movs	r3, #0
 8000c36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c38:	f04f 32ff 	mov.w	r2, #4294967295
 8000c3c:	69bb      	ldr	r3, [r7, #24]
 8000c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c42:	43da      	mvns	r2, r3
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	401a      	ands	r2, r3
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	fa01 f303 	lsl.w	r3, r1, r3
 8000c56:	43d9      	mvns	r1, r3
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c5c:	4313      	orrs	r3, r2
         );
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3724      	adds	r7, #36	@ 0x24
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bc80      	pop	{r7}
 8000c66:	4770      	bx	lr

08000c68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	3b01      	subs	r3, #1
 8000c74:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c78:	d301      	bcc.n	8000c7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	e00f      	b.n	8000c9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ca8 <SysTick_Config+0x40>)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	3b01      	subs	r3, #1
 8000c84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c86:	210f      	movs	r1, #15
 8000c88:	f04f 30ff 	mov.w	r0, #4294967295
 8000c8c:	f7ff ff90 	bl	8000bb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c90:	4b05      	ldr	r3, [pc, #20]	@ (8000ca8 <SysTick_Config+0x40>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c96:	4b04      	ldr	r3, [pc, #16]	@ (8000ca8 <SysTick_Config+0x40>)
 8000c98:	2207      	movs	r2, #7
 8000c9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c9c:	2300      	movs	r3, #0
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	e000e010 	.word	0xe000e010

08000cac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cb4:	6878      	ldr	r0, [r7, #4]
 8000cb6:	f7ff ff49 	bl	8000b4c <__NVIC_SetPriorityGrouping>
}
 8000cba:	bf00      	nop
 8000cbc:	3708      	adds	r7, #8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}

08000cc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	b086      	sub	sp, #24
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	4603      	mov	r3, r0
 8000cca:	60b9      	str	r1, [r7, #8]
 8000ccc:	607a      	str	r2, [r7, #4]
 8000cce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cd4:	f7ff ff5e 	bl	8000b94 <__NVIC_GetPriorityGrouping>
 8000cd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cda:	687a      	ldr	r2, [r7, #4]
 8000cdc:	68b9      	ldr	r1, [r7, #8]
 8000cde:	6978      	ldr	r0, [r7, #20]
 8000ce0:	f7ff ff90 	bl	8000c04 <NVIC_EncodePriority>
 8000ce4:	4602      	mov	r2, r0
 8000ce6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cea:	4611      	mov	r1, r2
 8000cec:	4618      	mov	r0, r3
 8000cee:	f7ff ff5f 	bl	8000bb0 <__NVIC_SetPriority>
}
 8000cf2:	bf00      	nop
 8000cf4:	3718      	adds	r7, #24
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}

08000cfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cfa:	b580      	push	{r7, lr}
 8000cfc:	b082      	sub	sp, #8
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d02:	6878      	ldr	r0, [r7, #4]
 8000d04:	f7ff ffb0 	bl	8000c68 <SysTick_Config>
 8000d08:	4603      	mov	r3, r0
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
	...

08000d14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b08b      	sub	sp, #44	@ 0x2c
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
 8000d1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d22:	2300      	movs	r3, #0
 8000d24:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d26:	e161      	b.n	8000fec <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d28:	2201      	movs	r2, #1
 8000d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d30:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	69fa      	ldr	r2, [r7, #28]
 8000d38:	4013      	ands	r3, r2
 8000d3a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d3c:	69ba      	ldr	r2, [r7, #24]
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	429a      	cmp	r2, r3
 8000d42:	f040 8150 	bne.w	8000fe6 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	4a97      	ldr	r2, [pc, #604]	@ (8000fa8 <HAL_GPIO_Init+0x294>)
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	d05e      	beq.n	8000e0e <HAL_GPIO_Init+0xfa>
 8000d50:	4a95      	ldr	r2, [pc, #596]	@ (8000fa8 <HAL_GPIO_Init+0x294>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d875      	bhi.n	8000e42 <HAL_GPIO_Init+0x12e>
 8000d56:	4a95      	ldr	r2, [pc, #596]	@ (8000fac <HAL_GPIO_Init+0x298>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d058      	beq.n	8000e0e <HAL_GPIO_Init+0xfa>
 8000d5c:	4a93      	ldr	r2, [pc, #588]	@ (8000fac <HAL_GPIO_Init+0x298>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d86f      	bhi.n	8000e42 <HAL_GPIO_Init+0x12e>
 8000d62:	4a93      	ldr	r2, [pc, #588]	@ (8000fb0 <HAL_GPIO_Init+0x29c>)
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d052      	beq.n	8000e0e <HAL_GPIO_Init+0xfa>
 8000d68:	4a91      	ldr	r2, [pc, #580]	@ (8000fb0 <HAL_GPIO_Init+0x29c>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d869      	bhi.n	8000e42 <HAL_GPIO_Init+0x12e>
 8000d6e:	4a91      	ldr	r2, [pc, #580]	@ (8000fb4 <HAL_GPIO_Init+0x2a0>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d04c      	beq.n	8000e0e <HAL_GPIO_Init+0xfa>
 8000d74:	4a8f      	ldr	r2, [pc, #572]	@ (8000fb4 <HAL_GPIO_Init+0x2a0>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d863      	bhi.n	8000e42 <HAL_GPIO_Init+0x12e>
 8000d7a:	4a8f      	ldr	r2, [pc, #572]	@ (8000fb8 <HAL_GPIO_Init+0x2a4>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d046      	beq.n	8000e0e <HAL_GPIO_Init+0xfa>
 8000d80:	4a8d      	ldr	r2, [pc, #564]	@ (8000fb8 <HAL_GPIO_Init+0x2a4>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d85d      	bhi.n	8000e42 <HAL_GPIO_Init+0x12e>
 8000d86:	2b12      	cmp	r3, #18
 8000d88:	d82a      	bhi.n	8000de0 <HAL_GPIO_Init+0xcc>
 8000d8a:	2b12      	cmp	r3, #18
 8000d8c:	d859      	bhi.n	8000e42 <HAL_GPIO_Init+0x12e>
 8000d8e:	a201      	add	r2, pc, #4	@ (adr r2, 8000d94 <HAL_GPIO_Init+0x80>)
 8000d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d94:	08000e0f 	.word	0x08000e0f
 8000d98:	08000de9 	.word	0x08000de9
 8000d9c:	08000dfb 	.word	0x08000dfb
 8000da0:	08000e3d 	.word	0x08000e3d
 8000da4:	08000e43 	.word	0x08000e43
 8000da8:	08000e43 	.word	0x08000e43
 8000dac:	08000e43 	.word	0x08000e43
 8000db0:	08000e43 	.word	0x08000e43
 8000db4:	08000e43 	.word	0x08000e43
 8000db8:	08000e43 	.word	0x08000e43
 8000dbc:	08000e43 	.word	0x08000e43
 8000dc0:	08000e43 	.word	0x08000e43
 8000dc4:	08000e43 	.word	0x08000e43
 8000dc8:	08000e43 	.word	0x08000e43
 8000dcc:	08000e43 	.word	0x08000e43
 8000dd0:	08000e43 	.word	0x08000e43
 8000dd4:	08000e43 	.word	0x08000e43
 8000dd8:	08000df1 	.word	0x08000df1
 8000ddc:	08000e05 	.word	0x08000e05
 8000de0:	4a76      	ldr	r2, [pc, #472]	@ (8000fbc <HAL_GPIO_Init+0x2a8>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d013      	beq.n	8000e0e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000de6:	e02c      	b.n	8000e42 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	623b      	str	r3, [r7, #32]
          break;
 8000dee:	e029      	b.n	8000e44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	68db      	ldr	r3, [r3, #12]
 8000df4:	3304      	adds	r3, #4
 8000df6:	623b      	str	r3, [r7, #32]
          break;
 8000df8:	e024      	b.n	8000e44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	68db      	ldr	r3, [r3, #12]
 8000dfe:	3308      	adds	r3, #8
 8000e00:	623b      	str	r3, [r7, #32]
          break;
 8000e02:	e01f      	b.n	8000e44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	68db      	ldr	r3, [r3, #12]
 8000e08:	330c      	adds	r3, #12
 8000e0a:	623b      	str	r3, [r7, #32]
          break;
 8000e0c:	e01a      	b.n	8000e44 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	689b      	ldr	r3, [r3, #8]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d102      	bne.n	8000e1c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e16:	2304      	movs	r3, #4
 8000e18:	623b      	str	r3, [r7, #32]
          break;
 8000e1a:	e013      	b.n	8000e44 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	689b      	ldr	r3, [r3, #8]
 8000e20:	2b01      	cmp	r3, #1
 8000e22:	d105      	bne.n	8000e30 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e24:	2308      	movs	r3, #8
 8000e26:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	69fa      	ldr	r2, [r7, #28]
 8000e2c:	611a      	str	r2, [r3, #16]
          break;
 8000e2e:	e009      	b.n	8000e44 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e30:	2308      	movs	r3, #8
 8000e32:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	69fa      	ldr	r2, [r7, #28]
 8000e38:	615a      	str	r2, [r3, #20]
          break;
 8000e3a:	e003      	b.n	8000e44 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	623b      	str	r3, [r7, #32]
          break;
 8000e40:	e000      	b.n	8000e44 <HAL_GPIO_Init+0x130>
          break;
 8000e42:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e44:	69bb      	ldr	r3, [r7, #24]
 8000e46:	2bff      	cmp	r3, #255	@ 0xff
 8000e48:	d801      	bhi.n	8000e4e <HAL_GPIO_Init+0x13a>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	e001      	b.n	8000e52 <HAL_GPIO_Init+0x13e>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	3304      	adds	r3, #4
 8000e52:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e54:	69bb      	ldr	r3, [r7, #24]
 8000e56:	2bff      	cmp	r3, #255	@ 0xff
 8000e58:	d802      	bhi.n	8000e60 <HAL_GPIO_Init+0x14c>
 8000e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e5c:	009b      	lsls	r3, r3, #2
 8000e5e:	e002      	b.n	8000e66 <HAL_GPIO_Init+0x152>
 8000e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e62:	3b08      	subs	r3, #8
 8000e64:	009b      	lsls	r3, r3, #2
 8000e66:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	210f      	movs	r1, #15
 8000e6e:	693b      	ldr	r3, [r7, #16]
 8000e70:	fa01 f303 	lsl.w	r3, r1, r3
 8000e74:	43db      	mvns	r3, r3
 8000e76:	401a      	ands	r2, r3
 8000e78:	6a39      	ldr	r1, [r7, #32]
 8000e7a:	693b      	ldr	r3, [r7, #16]
 8000e7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e80:	431a      	orrs	r2, r3
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	f000 80a9 	beq.w	8000fe6 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e94:	4b4a      	ldr	r3, [pc, #296]	@ (8000fc0 <HAL_GPIO_Init+0x2ac>)
 8000e96:	699b      	ldr	r3, [r3, #24]
 8000e98:	4a49      	ldr	r2, [pc, #292]	@ (8000fc0 <HAL_GPIO_Init+0x2ac>)
 8000e9a:	f043 0301 	orr.w	r3, r3, #1
 8000e9e:	6193      	str	r3, [r2, #24]
 8000ea0:	4b47      	ldr	r3, [pc, #284]	@ (8000fc0 <HAL_GPIO_Init+0x2ac>)
 8000ea2:	699b      	ldr	r3, [r3, #24]
 8000ea4:	f003 0301 	and.w	r3, r3, #1
 8000ea8:	60bb      	str	r3, [r7, #8]
 8000eaa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000eac:	4a45      	ldr	r2, [pc, #276]	@ (8000fc4 <HAL_GPIO_Init+0x2b0>)
 8000eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eb0:	089b      	lsrs	r3, r3, #2
 8000eb2:	3302      	adds	r3, #2
 8000eb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eb8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ebc:	f003 0303 	and.w	r3, r3, #3
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	220f      	movs	r2, #15
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	43db      	mvns	r3, r3
 8000eca:	68fa      	ldr	r2, [r7, #12]
 8000ecc:	4013      	ands	r3, r2
 8000ece:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	4a3d      	ldr	r2, [pc, #244]	@ (8000fc8 <HAL_GPIO_Init+0x2b4>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d00d      	beq.n	8000ef4 <HAL_GPIO_Init+0x1e0>
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	4a3c      	ldr	r2, [pc, #240]	@ (8000fcc <HAL_GPIO_Init+0x2b8>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d007      	beq.n	8000ef0 <HAL_GPIO_Init+0x1dc>
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	4a3b      	ldr	r2, [pc, #236]	@ (8000fd0 <HAL_GPIO_Init+0x2bc>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d101      	bne.n	8000eec <HAL_GPIO_Init+0x1d8>
 8000ee8:	2302      	movs	r3, #2
 8000eea:	e004      	b.n	8000ef6 <HAL_GPIO_Init+0x1e2>
 8000eec:	2303      	movs	r3, #3
 8000eee:	e002      	b.n	8000ef6 <HAL_GPIO_Init+0x1e2>
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	e000      	b.n	8000ef6 <HAL_GPIO_Init+0x1e2>
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ef8:	f002 0203 	and.w	r2, r2, #3
 8000efc:	0092      	lsls	r2, r2, #2
 8000efe:	4093      	lsls	r3, r2
 8000f00:	68fa      	ldr	r2, [r7, #12]
 8000f02:	4313      	orrs	r3, r2
 8000f04:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f06:	492f      	ldr	r1, [pc, #188]	@ (8000fc4 <HAL_GPIO_Init+0x2b0>)
 8000f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f0a:	089b      	lsrs	r3, r3, #2
 8000f0c:	3302      	adds	r3, #2
 8000f0e:	68fa      	ldr	r2, [r7, #12]
 8000f10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d006      	beq.n	8000f2e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f20:	4b2c      	ldr	r3, [pc, #176]	@ (8000fd4 <HAL_GPIO_Init+0x2c0>)
 8000f22:	689a      	ldr	r2, [r3, #8]
 8000f24:	492b      	ldr	r1, [pc, #172]	@ (8000fd4 <HAL_GPIO_Init+0x2c0>)
 8000f26:	69bb      	ldr	r3, [r7, #24]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	608b      	str	r3, [r1, #8]
 8000f2c:	e006      	b.n	8000f3c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f2e:	4b29      	ldr	r3, [pc, #164]	@ (8000fd4 <HAL_GPIO_Init+0x2c0>)
 8000f30:	689a      	ldr	r2, [r3, #8]
 8000f32:	69bb      	ldr	r3, [r7, #24]
 8000f34:	43db      	mvns	r3, r3
 8000f36:	4927      	ldr	r1, [pc, #156]	@ (8000fd4 <HAL_GPIO_Init+0x2c0>)
 8000f38:	4013      	ands	r3, r2
 8000f3a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d006      	beq.n	8000f56 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f48:	4b22      	ldr	r3, [pc, #136]	@ (8000fd4 <HAL_GPIO_Init+0x2c0>)
 8000f4a:	68da      	ldr	r2, [r3, #12]
 8000f4c:	4921      	ldr	r1, [pc, #132]	@ (8000fd4 <HAL_GPIO_Init+0x2c0>)
 8000f4e:	69bb      	ldr	r3, [r7, #24]
 8000f50:	4313      	orrs	r3, r2
 8000f52:	60cb      	str	r3, [r1, #12]
 8000f54:	e006      	b.n	8000f64 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f56:	4b1f      	ldr	r3, [pc, #124]	@ (8000fd4 <HAL_GPIO_Init+0x2c0>)
 8000f58:	68da      	ldr	r2, [r3, #12]
 8000f5a:	69bb      	ldr	r3, [r7, #24]
 8000f5c:	43db      	mvns	r3, r3
 8000f5e:	491d      	ldr	r1, [pc, #116]	@ (8000fd4 <HAL_GPIO_Init+0x2c0>)
 8000f60:	4013      	ands	r3, r2
 8000f62:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d006      	beq.n	8000f7e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f70:	4b18      	ldr	r3, [pc, #96]	@ (8000fd4 <HAL_GPIO_Init+0x2c0>)
 8000f72:	685a      	ldr	r2, [r3, #4]
 8000f74:	4917      	ldr	r1, [pc, #92]	@ (8000fd4 <HAL_GPIO_Init+0x2c0>)
 8000f76:	69bb      	ldr	r3, [r7, #24]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	604b      	str	r3, [r1, #4]
 8000f7c:	e006      	b.n	8000f8c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f7e:	4b15      	ldr	r3, [pc, #84]	@ (8000fd4 <HAL_GPIO_Init+0x2c0>)
 8000f80:	685a      	ldr	r2, [r3, #4]
 8000f82:	69bb      	ldr	r3, [r7, #24]
 8000f84:	43db      	mvns	r3, r3
 8000f86:	4913      	ldr	r1, [pc, #76]	@ (8000fd4 <HAL_GPIO_Init+0x2c0>)
 8000f88:	4013      	ands	r3, r2
 8000f8a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d01f      	beq.n	8000fd8 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f98:	4b0e      	ldr	r3, [pc, #56]	@ (8000fd4 <HAL_GPIO_Init+0x2c0>)
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	490d      	ldr	r1, [pc, #52]	@ (8000fd4 <HAL_GPIO_Init+0x2c0>)
 8000f9e:	69bb      	ldr	r3, [r7, #24]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	600b      	str	r3, [r1, #0]
 8000fa4:	e01f      	b.n	8000fe6 <HAL_GPIO_Init+0x2d2>
 8000fa6:	bf00      	nop
 8000fa8:	10320000 	.word	0x10320000
 8000fac:	10310000 	.word	0x10310000
 8000fb0:	10220000 	.word	0x10220000
 8000fb4:	10210000 	.word	0x10210000
 8000fb8:	10120000 	.word	0x10120000
 8000fbc:	10110000 	.word	0x10110000
 8000fc0:	40021000 	.word	0x40021000
 8000fc4:	40010000 	.word	0x40010000
 8000fc8:	40010800 	.word	0x40010800
 8000fcc:	40010c00 	.word	0x40010c00
 8000fd0:	40011000 	.word	0x40011000
 8000fd4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000fd8:	4b0b      	ldr	r3, [pc, #44]	@ (8001008 <HAL_GPIO_Init+0x2f4>)
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	69bb      	ldr	r3, [r7, #24]
 8000fde:	43db      	mvns	r3, r3
 8000fe0:	4909      	ldr	r1, [pc, #36]	@ (8001008 <HAL_GPIO_Init+0x2f4>)
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fe8:	3301      	adds	r3, #1
 8000fea:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ff2:	fa22 f303 	lsr.w	r3, r2, r3
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	f47f ae96 	bne.w	8000d28 <HAL_GPIO_Init+0x14>
  }
}
 8000ffc:	bf00      	nop
 8000ffe:	bf00      	nop
 8001000:	372c      	adds	r7, #44	@ 0x2c
 8001002:	46bd      	mov	sp, r7
 8001004:	bc80      	pop	{r7}
 8001006:	4770      	bx	lr
 8001008:	40010400 	.word	0x40010400

0800100c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	460b      	mov	r3, r1
 8001016:	807b      	strh	r3, [r7, #2]
 8001018:	4613      	mov	r3, r2
 800101a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800101c:	787b      	ldrb	r3, [r7, #1]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d003      	beq.n	800102a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001022:	887a      	ldrh	r2, [r7, #2]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001028:	e003      	b.n	8001032 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800102a:	887b      	ldrh	r3, [r7, #2]
 800102c:	041a      	lsls	r2, r3, #16
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	611a      	str	r2, [r3, #16]
}
 8001032:	bf00      	nop
 8001034:	370c      	adds	r7, #12
 8001036:	46bd      	mov	sp, r7
 8001038:	bc80      	pop	{r7}
 800103a:	4770      	bx	lr

0800103c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b086      	sub	sp, #24
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d101      	bne.n	800104e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800104a:	2301      	movs	r3, #1
 800104c:	e272      	b.n	8001534 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f003 0301 	and.w	r3, r3, #1
 8001056:	2b00      	cmp	r3, #0
 8001058:	f000 8087 	beq.w	800116a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800105c:	4b92      	ldr	r3, [pc, #584]	@ (80012a8 <HAL_RCC_OscConfig+0x26c>)
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f003 030c 	and.w	r3, r3, #12
 8001064:	2b04      	cmp	r3, #4
 8001066:	d00c      	beq.n	8001082 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001068:	4b8f      	ldr	r3, [pc, #572]	@ (80012a8 <HAL_RCC_OscConfig+0x26c>)
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f003 030c 	and.w	r3, r3, #12
 8001070:	2b08      	cmp	r3, #8
 8001072:	d112      	bne.n	800109a <HAL_RCC_OscConfig+0x5e>
 8001074:	4b8c      	ldr	r3, [pc, #560]	@ (80012a8 <HAL_RCC_OscConfig+0x26c>)
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800107c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001080:	d10b      	bne.n	800109a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001082:	4b89      	ldr	r3, [pc, #548]	@ (80012a8 <HAL_RCC_OscConfig+0x26c>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800108a:	2b00      	cmp	r3, #0
 800108c:	d06c      	beq.n	8001168 <HAL_RCC_OscConfig+0x12c>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d168      	bne.n	8001168 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	e24c      	b.n	8001534 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010a2:	d106      	bne.n	80010b2 <HAL_RCC_OscConfig+0x76>
 80010a4:	4b80      	ldr	r3, [pc, #512]	@ (80012a8 <HAL_RCC_OscConfig+0x26c>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a7f      	ldr	r2, [pc, #508]	@ (80012a8 <HAL_RCC_OscConfig+0x26c>)
 80010aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010ae:	6013      	str	r3, [r2, #0]
 80010b0:	e02e      	b.n	8001110 <HAL_RCC_OscConfig+0xd4>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d10c      	bne.n	80010d4 <HAL_RCC_OscConfig+0x98>
 80010ba:	4b7b      	ldr	r3, [pc, #492]	@ (80012a8 <HAL_RCC_OscConfig+0x26c>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a7a      	ldr	r2, [pc, #488]	@ (80012a8 <HAL_RCC_OscConfig+0x26c>)
 80010c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80010c4:	6013      	str	r3, [r2, #0]
 80010c6:	4b78      	ldr	r3, [pc, #480]	@ (80012a8 <HAL_RCC_OscConfig+0x26c>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a77      	ldr	r2, [pc, #476]	@ (80012a8 <HAL_RCC_OscConfig+0x26c>)
 80010cc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80010d0:	6013      	str	r3, [r2, #0]
 80010d2:	e01d      	b.n	8001110 <HAL_RCC_OscConfig+0xd4>
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80010dc:	d10c      	bne.n	80010f8 <HAL_RCC_OscConfig+0xbc>
 80010de:	4b72      	ldr	r3, [pc, #456]	@ (80012a8 <HAL_RCC_OscConfig+0x26c>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a71      	ldr	r2, [pc, #452]	@ (80012a8 <HAL_RCC_OscConfig+0x26c>)
 80010e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80010e8:	6013      	str	r3, [r2, #0]
 80010ea:	4b6f      	ldr	r3, [pc, #444]	@ (80012a8 <HAL_RCC_OscConfig+0x26c>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a6e      	ldr	r2, [pc, #440]	@ (80012a8 <HAL_RCC_OscConfig+0x26c>)
 80010f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010f4:	6013      	str	r3, [r2, #0]
 80010f6:	e00b      	b.n	8001110 <HAL_RCC_OscConfig+0xd4>
 80010f8:	4b6b      	ldr	r3, [pc, #428]	@ (80012a8 <HAL_RCC_OscConfig+0x26c>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a6a      	ldr	r2, [pc, #424]	@ (80012a8 <HAL_RCC_OscConfig+0x26c>)
 80010fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001102:	6013      	str	r3, [r2, #0]
 8001104:	4b68      	ldr	r3, [pc, #416]	@ (80012a8 <HAL_RCC_OscConfig+0x26c>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a67      	ldr	r2, [pc, #412]	@ (80012a8 <HAL_RCC_OscConfig+0x26c>)
 800110a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800110e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d013      	beq.n	8001140 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001118:	f7ff fcea 	bl	8000af0 <HAL_GetTick>
 800111c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800111e:	e008      	b.n	8001132 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001120:	f7ff fce6 	bl	8000af0 <HAL_GetTick>
 8001124:	4602      	mov	r2, r0
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	2b64      	cmp	r3, #100	@ 0x64
 800112c:	d901      	bls.n	8001132 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800112e:	2303      	movs	r3, #3
 8001130:	e200      	b.n	8001534 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001132:	4b5d      	ldr	r3, [pc, #372]	@ (80012a8 <HAL_RCC_OscConfig+0x26c>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800113a:	2b00      	cmp	r3, #0
 800113c:	d0f0      	beq.n	8001120 <HAL_RCC_OscConfig+0xe4>
 800113e:	e014      	b.n	800116a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001140:	f7ff fcd6 	bl	8000af0 <HAL_GetTick>
 8001144:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001146:	e008      	b.n	800115a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001148:	f7ff fcd2 	bl	8000af0 <HAL_GetTick>
 800114c:	4602      	mov	r2, r0
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	2b64      	cmp	r3, #100	@ 0x64
 8001154:	d901      	bls.n	800115a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001156:	2303      	movs	r3, #3
 8001158:	e1ec      	b.n	8001534 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800115a:	4b53      	ldr	r3, [pc, #332]	@ (80012a8 <HAL_RCC_OscConfig+0x26c>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001162:	2b00      	cmp	r3, #0
 8001164:	d1f0      	bne.n	8001148 <HAL_RCC_OscConfig+0x10c>
 8001166:	e000      	b.n	800116a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001168:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f003 0302 	and.w	r3, r3, #2
 8001172:	2b00      	cmp	r3, #0
 8001174:	d063      	beq.n	800123e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001176:	4b4c      	ldr	r3, [pc, #304]	@ (80012a8 <HAL_RCC_OscConfig+0x26c>)
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f003 030c 	and.w	r3, r3, #12
 800117e:	2b00      	cmp	r3, #0
 8001180:	d00b      	beq.n	800119a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001182:	4b49      	ldr	r3, [pc, #292]	@ (80012a8 <HAL_RCC_OscConfig+0x26c>)
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f003 030c 	and.w	r3, r3, #12
 800118a:	2b08      	cmp	r3, #8
 800118c:	d11c      	bne.n	80011c8 <HAL_RCC_OscConfig+0x18c>
 800118e:	4b46      	ldr	r3, [pc, #280]	@ (80012a8 <HAL_RCC_OscConfig+0x26c>)
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001196:	2b00      	cmp	r3, #0
 8001198:	d116      	bne.n	80011c8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800119a:	4b43      	ldr	r3, [pc, #268]	@ (80012a8 <HAL_RCC_OscConfig+0x26c>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f003 0302 	and.w	r3, r3, #2
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d005      	beq.n	80011b2 <HAL_RCC_OscConfig+0x176>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	691b      	ldr	r3, [r3, #16]
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d001      	beq.n	80011b2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	e1c0      	b.n	8001534 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011b2:	4b3d      	ldr	r3, [pc, #244]	@ (80012a8 <HAL_RCC_OscConfig+0x26c>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	695b      	ldr	r3, [r3, #20]
 80011be:	00db      	lsls	r3, r3, #3
 80011c0:	4939      	ldr	r1, [pc, #228]	@ (80012a8 <HAL_RCC_OscConfig+0x26c>)
 80011c2:	4313      	orrs	r3, r2
 80011c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011c6:	e03a      	b.n	800123e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	691b      	ldr	r3, [r3, #16]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d020      	beq.n	8001212 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011d0:	4b36      	ldr	r3, [pc, #216]	@ (80012ac <HAL_RCC_OscConfig+0x270>)
 80011d2:	2201      	movs	r2, #1
 80011d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011d6:	f7ff fc8b 	bl	8000af0 <HAL_GetTick>
 80011da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011dc:	e008      	b.n	80011f0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011de:	f7ff fc87 	bl	8000af0 <HAL_GetTick>
 80011e2:	4602      	mov	r2, r0
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	1ad3      	subs	r3, r2, r3
 80011e8:	2b02      	cmp	r3, #2
 80011ea:	d901      	bls.n	80011f0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80011ec:	2303      	movs	r3, #3
 80011ee:	e1a1      	b.n	8001534 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011f0:	4b2d      	ldr	r3, [pc, #180]	@ (80012a8 <HAL_RCC_OscConfig+0x26c>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f003 0302 	and.w	r3, r3, #2
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d0f0      	beq.n	80011de <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011fc:	4b2a      	ldr	r3, [pc, #168]	@ (80012a8 <HAL_RCC_OscConfig+0x26c>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	695b      	ldr	r3, [r3, #20]
 8001208:	00db      	lsls	r3, r3, #3
 800120a:	4927      	ldr	r1, [pc, #156]	@ (80012a8 <HAL_RCC_OscConfig+0x26c>)
 800120c:	4313      	orrs	r3, r2
 800120e:	600b      	str	r3, [r1, #0]
 8001210:	e015      	b.n	800123e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001212:	4b26      	ldr	r3, [pc, #152]	@ (80012ac <HAL_RCC_OscConfig+0x270>)
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001218:	f7ff fc6a 	bl	8000af0 <HAL_GetTick>
 800121c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800121e:	e008      	b.n	8001232 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001220:	f7ff fc66 	bl	8000af0 <HAL_GetTick>
 8001224:	4602      	mov	r2, r0
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	1ad3      	subs	r3, r2, r3
 800122a:	2b02      	cmp	r3, #2
 800122c:	d901      	bls.n	8001232 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800122e:	2303      	movs	r3, #3
 8001230:	e180      	b.n	8001534 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001232:	4b1d      	ldr	r3, [pc, #116]	@ (80012a8 <HAL_RCC_OscConfig+0x26c>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f003 0302 	and.w	r3, r3, #2
 800123a:	2b00      	cmp	r3, #0
 800123c:	d1f0      	bne.n	8001220 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f003 0308 	and.w	r3, r3, #8
 8001246:	2b00      	cmp	r3, #0
 8001248:	d03a      	beq.n	80012c0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	699b      	ldr	r3, [r3, #24]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d019      	beq.n	8001286 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001252:	4b17      	ldr	r3, [pc, #92]	@ (80012b0 <HAL_RCC_OscConfig+0x274>)
 8001254:	2201      	movs	r2, #1
 8001256:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001258:	f7ff fc4a 	bl	8000af0 <HAL_GetTick>
 800125c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800125e:	e008      	b.n	8001272 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001260:	f7ff fc46 	bl	8000af0 <HAL_GetTick>
 8001264:	4602      	mov	r2, r0
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	2b02      	cmp	r3, #2
 800126c:	d901      	bls.n	8001272 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800126e:	2303      	movs	r3, #3
 8001270:	e160      	b.n	8001534 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001272:	4b0d      	ldr	r3, [pc, #52]	@ (80012a8 <HAL_RCC_OscConfig+0x26c>)
 8001274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001276:	f003 0302 	and.w	r3, r3, #2
 800127a:	2b00      	cmp	r3, #0
 800127c:	d0f0      	beq.n	8001260 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800127e:	2001      	movs	r0, #1
 8001280:	f000 fa9c 	bl	80017bc <RCC_Delay>
 8001284:	e01c      	b.n	80012c0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001286:	4b0a      	ldr	r3, [pc, #40]	@ (80012b0 <HAL_RCC_OscConfig+0x274>)
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800128c:	f7ff fc30 	bl	8000af0 <HAL_GetTick>
 8001290:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001292:	e00f      	b.n	80012b4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001294:	f7ff fc2c 	bl	8000af0 <HAL_GetTick>
 8001298:	4602      	mov	r2, r0
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	2b02      	cmp	r3, #2
 80012a0:	d908      	bls.n	80012b4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80012a2:	2303      	movs	r3, #3
 80012a4:	e146      	b.n	8001534 <HAL_RCC_OscConfig+0x4f8>
 80012a6:	bf00      	nop
 80012a8:	40021000 	.word	0x40021000
 80012ac:	42420000 	.word	0x42420000
 80012b0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012b4:	4b92      	ldr	r3, [pc, #584]	@ (8001500 <HAL_RCC_OscConfig+0x4c4>)
 80012b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012b8:	f003 0302 	and.w	r3, r3, #2
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d1e9      	bne.n	8001294 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f003 0304 	and.w	r3, r3, #4
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	f000 80a6 	beq.w	800141a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012ce:	2300      	movs	r3, #0
 80012d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012d2:	4b8b      	ldr	r3, [pc, #556]	@ (8001500 <HAL_RCC_OscConfig+0x4c4>)
 80012d4:	69db      	ldr	r3, [r3, #28]
 80012d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d10d      	bne.n	80012fa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012de:	4b88      	ldr	r3, [pc, #544]	@ (8001500 <HAL_RCC_OscConfig+0x4c4>)
 80012e0:	69db      	ldr	r3, [r3, #28]
 80012e2:	4a87      	ldr	r2, [pc, #540]	@ (8001500 <HAL_RCC_OscConfig+0x4c4>)
 80012e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012e8:	61d3      	str	r3, [r2, #28]
 80012ea:	4b85      	ldr	r3, [pc, #532]	@ (8001500 <HAL_RCC_OscConfig+0x4c4>)
 80012ec:	69db      	ldr	r3, [r3, #28]
 80012ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012f2:	60bb      	str	r3, [r7, #8]
 80012f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012f6:	2301      	movs	r3, #1
 80012f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012fa:	4b82      	ldr	r3, [pc, #520]	@ (8001504 <HAL_RCC_OscConfig+0x4c8>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001302:	2b00      	cmp	r3, #0
 8001304:	d118      	bne.n	8001338 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001306:	4b7f      	ldr	r3, [pc, #508]	@ (8001504 <HAL_RCC_OscConfig+0x4c8>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a7e      	ldr	r2, [pc, #504]	@ (8001504 <HAL_RCC_OscConfig+0x4c8>)
 800130c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001310:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001312:	f7ff fbed 	bl	8000af0 <HAL_GetTick>
 8001316:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001318:	e008      	b.n	800132c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800131a:	f7ff fbe9 	bl	8000af0 <HAL_GetTick>
 800131e:	4602      	mov	r2, r0
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	1ad3      	subs	r3, r2, r3
 8001324:	2b64      	cmp	r3, #100	@ 0x64
 8001326:	d901      	bls.n	800132c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001328:	2303      	movs	r3, #3
 800132a:	e103      	b.n	8001534 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800132c:	4b75      	ldr	r3, [pc, #468]	@ (8001504 <HAL_RCC_OscConfig+0x4c8>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001334:	2b00      	cmp	r3, #0
 8001336:	d0f0      	beq.n	800131a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	2b01      	cmp	r3, #1
 800133e:	d106      	bne.n	800134e <HAL_RCC_OscConfig+0x312>
 8001340:	4b6f      	ldr	r3, [pc, #444]	@ (8001500 <HAL_RCC_OscConfig+0x4c4>)
 8001342:	6a1b      	ldr	r3, [r3, #32]
 8001344:	4a6e      	ldr	r2, [pc, #440]	@ (8001500 <HAL_RCC_OscConfig+0x4c4>)
 8001346:	f043 0301 	orr.w	r3, r3, #1
 800134a:	6213      	str	r3, [r2, #32]
 800134c:	e02d      	b.n	80013aa <HAL_RCC_OscConfig+0x36e>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	68db      	ldr	r3, [r3, #12]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d10c      	bne.n	8001370 <HAL_RCC_OscConfig+0x334>
 8001356:	4b6a      	ldr	r3, [pc, #424]	@ (8001500 <HAL_RCC_OscConfig+0x4c4>)
 8001358:	6a1b      	ldr	r3, [r3, #32]
 800135a:	4a69      	ldr	r2, [pc, #420]	@ (8001500 <HAL_RCC_OscConfig+0x4c4>)
 800135c:	f023 0301 	bic.w	r3, r3, #1
 8001360:	6213      	str	r3, [r2, #32]
 8001362:	4b67      	ldr	r3, [pc, #412]	@ (8001500 <HAL_RCC_OscConfig+0x4c4>)
 8001364:	6a1b      	ldr	r3, [r3, #32]
 8001366:	4a66      	ldr	r2, [pc, #408]	@ (8001500 <HAL_RCC_OscConfig+0x4c4>)
 8001368:	f023 0304 	bic.w	r3, r3, #4
 800136c:	6213      	str	r3, [r2, #32]
 800136e:	e01c      	b.n	80013aa <HAL_RCC_OscConfig+0x36e>
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	2b05      	cmp	r3, #5
 8001376:	d10c      	bne.n	8001392 <HAL_RCC_OscConfig+0x356>
 8001378:	4b61      	ldr	r3, [pc, #388]	@ (8001500 <HAL_RCC_OscConfig+0x4c4>)
 800137a:	6a1b      	ldr	r3, [r3, #32]
 800137c:	4a60      	ldr	r2, [pc, #384]	@ (8001500 <HAL_RCC_OscConfig+0x4c4>)
 800137e:	f043 0304 	orr.w	r3, r3, #4
 8001382:	6213      	str	r3, [r2, #32]
 8001384:	4b5e      	ldr	r3, [pc, #376]	@ (8001500 <HAL_RCC_OscConfig+0x4c4>)
 8001386:	6a1b      	ldr	r3, [r3, #32]
 8001388:	4a5d      	ldr	r2, [pc, #372]	@ (8001500 <HAL_RCC_OscConfig+0x4c4>)
 800138a:	f043 0301 	orr.w	r3, r3, #1
 800138e:	6213      	str	r3, [r2, #32]
 8001390:	e00b      	b.n	80013aa <HAL_RCC_OscConfig+0x36e>
 8001392:	4b5b      	ldr	r3, [pc, #364]	@ (8001500 <HAL_RCC_OscConfig+0x4c4>)
 8001394:	6a1b      	ldr	r3, [r3, #32]
 8001396:	4a5a      	ldr	r2, [pc, #360]	@ (8001500 <HAL_RCC_OscConfig+0x4c4>)
 8001398:	f023 0301 	bic.w	r3, r3, #1
 800139c:	6213      	str	r3, [r2, #32]
 800139e:	4b58      	ldr	r3, [pc, #352]	@ (8001500 <HAL_RCC_OscConfig+0x4c4>)
 80013a0:	6a1b      	ldr	r3, [r3, #32]
 80013a2:	4a57      	ldr	r2, [pc, #348]	@ (8001500 <HAL_RCC_OscConfig+0x4c4>)
 80013a4:	f023 0304 	bic.w	r3, r3, #4
 80013a8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	68db      	ldr	r3, [r3, #12]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d015      	beq.n	80013de <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013b2:	f7ff fb9d 	bl	8000af0 <HAL_GetTick>
 80013b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013b8:	e00a      	b.n	80013d0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013ba:	f7ff fb99 	bl	8000af0 <HAL_GetTick>
 80013be:	4602      	mov	r2, r0
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d901      	bls.n	80013d0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80013cc:	2303      	movs	r3, #3
 80013ce:	e0b1      	b.n	8001534 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013d0:	4b4b      	ldr	r3, [pc, #300]	@ (8001500 <HAL_RCC_OscConfig+0x4c4>)
 80013d2:	6a1b      	ldr	r3, [r3, #32]
 80013d4:	f003 0302 	and.w	r3, r3, #2
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d0ee      	beq.n	80013ba <HAL_RCC_OscConfig+0x37e>
 80013dc:	e014      	b.n	8001408 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013de:	f7ff fb87 	bl	8000af0 <HAL_GetTick>
 80013e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013e4:	e00a      	b.n	80013fc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013e6:	f7ff fb83 	bl	8000af0 <HAL_GetTick>
 80013ea:	4602      	mov	r2, r0
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	1ad3      	subs	r3, r2, r3
 80013f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d901      	bls.n	80013fc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80013f8:	2303      	movs	r3, #3
 80013fa:	e09b      	b.n	8001534 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013fc:	4b40      	ldr	r3, [pc, #256]	@ (8001500 <HAL_RCC_OscConfig+0x4c4>)
 80013fe:	6a1b      	ldr	r3, [r3, #32]
 8001400:	f003 0302 	and.w	r3, r3, #2
 8001404:	2b00      	cmp	r3, #0
 8001406:	d1ee      	bne.n	80013e6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001408:	7dfb      	ldrb	r3, [r7, #23]
 800140a:	2b01      	cmp	r3, #1
 800140c:	d105      	bne.n	800141a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800140e:	4b3c      	ldr	r3, [pc, #240]	@ (8001500 <HAL_RCC_OscConfig+0x4c4>)
 8001410:	69db      	ldr	r3, [r3, #28]
 8001412:	4a3b      	ldr	r2, [pc, #236]	@ (8001500 <HAL_RCC_OscConfig+0x4c4>)
 8001414:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001418:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	69db      	ldr	r3, [r3, #28]
 800141e:	2b00      	cmp	r3, #0
 8001420:	f000 8087 	beq.w	8001532 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001424:	4b36      	ldr	r3, [pc, #216]	@ (8001500 <HAL_RCC_OscConfig+0x4c4>)
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f003 030c 	and.w	r3, r3, #12
 800142c:	2b08      	cmp	r3, #8
 800142e:	d061      	beq.n	80014f4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	69db      	ldr	r3, [r3, #28]
 8001434:	2b02      	cmp	r3, #2
 8001436:	d146      	bne.n	80014c6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001438:	4b33      	ldr	r3, [pc, #204]	@ (8001508 <HAL_RCC_OscConfig+0x4cc>)
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800143e:	f7ff fb57 	bl	8000af0 <HAL_GetTick>
 8001442:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001444:	e008      	b.n	8001458 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001446:	f7ff fb53 	bl	8000af0 <HAL_GetTick>
 800144a:	4602      	mov	r2, r0
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	1ad3      	subs	r3, r2, r3
 8001450:	2b02      	cmp	r3, #2
 8001452:	d901      	bls.n	8001458 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001454:	2303      	movs	r3, #3
 8001456:	e06d      	b.n	8001534 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001458:	4b29      	ldr	r3, [pc, #164]	@ (8001500 <HAL_RCC_OscConfig+0x4c4>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001460:	2b00      	cmp	r3, #0
 8001462:	d1f0      	bne.n	8001446 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6a1b      	ldr	r3, [r3, #32]
 8001468:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800146c:	d108      	bne.n	8001480 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800146e:	4b24      	ldr	r3, [pc, #144]	@ (8001500 <HAL_RCC_OscConfig+0x4c4>)
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	4921      	ldr	r1, [pc, #132]	@ (8001500 <HAL_RCC_OscConfig+0x4c4>)
 800147c:	4313      	orrs	r3, r2
 800147e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001480:	4b1f      	ldr	r3, [pc, #124]	@ (8001500 <HAL_RCC_OscConfig+0x4c4>)
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6a19      	ldr	r1, [r3, #32]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001490:	430b      	orrs	r3, r1
 8001492:	491b      	ldr	r1, [pc, #108]	@ (8001500 <HAL_RCC_OscConfig+0x4c4>)
 8001494:	4313      	orrs	r3, r2
 8001496:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001498:	4b1b      	ldr	r3, [pc, #108]	@ (8001508 <HAL_RCC_OscConfig+0x4cc>)
 800149a:	2201      	movs	r2, #1
 800149c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800149e:	f7ff fb27 	bl	8000af0 <HAL_GetTick>
 80014a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014a4:	e008      	b.n	80014b8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014a6:	f7ff fb23 	bl	8000af0 <HAL_GetTick>
 80014aa:	4602      	mov	r2, r0
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d901      	bls.n	80014b8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80014b4:	2303      	movs	r3, #3
 80014b6:	e03d      	b.n	8001534 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014b8:	4b11      	ldr	r3, [pc, #68]	@ (8001500 <HAL_RCC_OscConfig+0x4c4>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d0f0      	beq.n	80014a6 <HAL_RCC_OscConfig+0x46a>
 80014c4:	e035      	b.n	8001532 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014c6:	4b10      	ldr	r3, [pc, #64]	@ (8001508 <HAL_RCC_OscConfig+0x4cc>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014cc:	f7ff fb10 	bl	8000af0 <HAL_GetTick>
 80014d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014d2:	e008      	b.n	80014e6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014d4:	f7ff fb0c 	bl	8000af0 <HAL_GetTick>
 80014d8:	4602      	mov	r2, r0
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d901      	bls.n	80014e6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80014e2:	2303      	movs	r3, #3
 80014e4:	e026      	b.n	8001534 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014e6:	4b06      	ldr	r3, [pc, #24]	@ (8001500 <HAL_RCC_OscConfig+0x4c4>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d1f0      	bne.n	80014d4 <HAL_RCC_OscConfig+0x498>
 80014f2:	e01e      	b.n	8001532 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	69db      	ldr	r3, [r3, #28]
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d107      	bne.n	800150c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	e019      	b.n	8001534 <HAL_RCC_OscConfig+0x4f8>
 8001500:	40021000 	.word	0x40021000
 8001504:	40007000 	.word	0x40007000
 8001508:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800150c:	4b0b      	ldr	r3, [pc, #44]	@ (800153c <HAL_RCC_OscConfig+0x500>)
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6a1b      	ldr	r3, [r3, #32]
 800151c:	429a      	cmp	r2, r3
 800151e:	d106      	bne.n	800152e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800152a:	429a      	cmp	r2, r3
 800152c:	d001      	beq.n	8001532 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e000      	b.n	8001534 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001532:	2300      	movs	r3, #0
}
 8001534:	4618      	mov	r0, r3
 8001536:	3718      	adds	r7, #24
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	40021000 	.word	0x40021000

08001540 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d101      	bne.n	8001554 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	e0d0      	b.n	80016f6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001554:	4b6a      	ldr	r3, [pc, #424]	@ (8001700 <HAL_RCC_ClockConfig+0x1c0>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 0307 	and.w	r3, r3, #7
 800155c:	683a      	ldr	r2, [r7, #0]
 800155e:	429a      	cmp	r2, r3
 8001560:	d910      	bls.n	8001584 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001562:	4b67      	ldr	r3, [pc, #412]	@ (8001700 <HAL_RCC_ClockConfig+0x1c0>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f023 0207 	bic.w	r2, r3, #7
 800156a:	4965      	ldr	r1, [pc, #404]	@ (8001700 <HAL_RCC_ClockConfig+0x1c0>)
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	4313      	orrs	r3, r2
 8001570:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001572:	4b63      	ldr	r3, [pc, #396]	@ (8001700 <HAL_RCC_ClockConfig+0x1c0>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 0307 	and.w	r3, r3, #7
 800157a:	683a      	ldr	r2, [r7, #0]
 800157c:	429a      	cmp	r2, r3
 800157e:	d001      	beq.n	8001584 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	e0b8      	b.n	80016f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 0302 	and.w	r3, r3, #2
 800158c:	2b00      	cmp	r3, #0
 800158e:	d020      	beq.n	80015d2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 0304 	and.w	r3, r3, #4
 8001598:	2b00      	cmp	r3, #0
 800159a:	d005      	beq.n	80015a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800159c:	4b59      	ldr	r3, [pc, #356]	@ (8001704 <HAL_RCC_ClockConfig+0x1c4>)
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	4a58      	ldr	r2, [pc, #352]	@ (8001704 <HAL_RCC_ClockConfig+0x1c4>)
 80015a2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80015a6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 0308 	and.w	r3, r3, #8
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d005      	beq.n	80015c0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015b4:	4b53      	ldr	r3, [pc, #332]	@ (8001704 <HAL_RCC_ClockConfig+0x1c4>)
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	4a52      	ldr	r2, [pc, #328]	@ (8001704 <HAL_RCC_ClockConfig+0x1c4>)
 80015ba:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80015be:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015c0:	4b50      	ldr	r3, [pc, #320]	@ (8001704 <HAL_RCC_ClockConfig+0x1c4>)
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	494d      	ldr	r1, [pc, #308]	@ (8001704 <HAL_RCC_ClockConfig+0x1c4>)
 80015ce:	4313      	orrs	r3, r2
 80015d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 0301 	and.w	r3, r3, #1
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d040      	beq.n	8001660 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d107      	bne.n	80015f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015e6:	4b47      	ldr	r3, [pc, #284]	@ (8001704 <HAL_RCC_ClockConfig+0x1c4>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d115      	bne.n	800161e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e07f      	b.n	80016f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d107      	bne.n	800160e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015fe:	4b41      	ldr	r3, [pc, #260]	@ (8001704 <HAL_RCC_ClockConfig+0x1c4>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d109      	bne.n	800161e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e073      	b.n	80016f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800160e:	4b3d      	ldr	r3, [pc, #244]	@ (8001704 <HAL_RCC_ClockConfig+0x1c4>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 0302 	and.w	r3, r3, #2
 8001616:	2b00      	cmp	r3, #0
 8001618:	d101      	bne.n	800161e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e06b      	b.n	80016f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800161e:	4b39      	ldr	r3, [pc, #228]	@ (8001704 <HAL_RCC_ClockConfig+0x1c4>)
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f023 0203 	bic.w	r2, r3, #3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	4936      	ldr	r1, [pc, #216]	@ (8001704 <HAL_RCC_ClockConfig+0x1c4>)
 800162c:	4313      	orrs	r3, r2
 800162e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001630:	f7ff fa5e 	bl	8000af0 <HAL_GetTick>
 8001634:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001636:	e00a      	b.n	800164e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001638:	f7ff fa5a 	bl	8000af0 <HAL_GetTick>
 800163c:	4602      	mov	r2, r0
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001646:	4293      	cmp	r3, r2
 8001648:	d901      	bls.n	800164e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e053      	b.n	80016f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800164e:	4b2d      	ldr	r3, [pc, #180]	@ (8001704 <HAL_RCC_ClockConfig+0x1c4>)
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	f003 020c 	and.w	r2, r3, #12
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	429a      	cmp	r2, r3
 800165e:	d1eb      	bne.n	8001638 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001660:	4b27      	ldr	r3, [pc, #156]	@ (8001700 <HAL_RCC_ClockConfig+0x1c0>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 0307 	and.w	r3, r3, #7
 8001668:	683a      	ldr	r2, [r7, #0]
 800166a:	429a      	cmp	r2, r3
 800166c:	d210      	bcs.n	8001690 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800166e:	4b24      	ldr	r3, [pc, #144]	@ (8001700 <HAL_RCC_ClockConfig+0x1c0>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f023 0207 	bic.w	r2, r3, #7
 8001676:	4922      	ldr	r1, [pc, #136]	@ (8001700 <HAL_RCC_ClockConfig+0x1c0>)
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	4313      	orrs	r3, r2
 800167c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800167e:	4b20      	ldr	r3, [pc, #128]	@ (8001700 <HAL_RCC_ClockConfig+0x1c0>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 0307 	and.w	r3, r3, #7
 8001686:	683a      	ldr	r2, [r7, #0]
 8001688:	429a      	cmp	r2, r3
 800168a:	d001      	beq.n	8001690 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	e032      	b.n	80016f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 0304 	and.w	r3, r3, #4
 8001698:	2b00      	cmp	r3, #0
 800169a:	d008      	beq.n	80016ae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800169c:	4b19      	ldr	r3, [pc, #100]	@ (8001704 <HAL_RCC_ClockConfig+0x1c4>)
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	4916      	ldr	r1, [pc, #88]	@ (8001704 <HAL_RCC_ClockConfig+0x1c4>)
 80016aa:	4313      	orrs	r3, r2
 80016ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 0308 	and.w	r3, r3, #8
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d009      	beq.n	80016ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80016ba:	4b12      	ldr	r3, [pc, #72]	@ (8001704 <HAL_RCC_ClockConfig+0x1c4>)
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	691b      	ldr	r3, [r3, #16]
 80016c6:	00db      	lsls	r3, r3, #3
 80016c8:	490e      	ldr	r1, [pc, #56]	@ (8001704 <HAL_RCC_ClockConfig+0x1c4>)
 80016ca:	4313      	orrs	r3, r2
 80016cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80016ce:	f000 f821 	bl	8001714 <HAL_RCC_GetSysClockFreq>
 80016d2:	4602      	mov	r2, r0
 80016d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001704 <HAL_RCC_ClockConfig+0x1c4>)
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	091b      	lsrs	r3, r3, #4
 80016da:	f003 030f 	and.w	r3, r3, #15
 80016de:	490a      	ldr	r1, [pc, #40]	@ (8001708 <HAL_RCC_ClockConfig+0x1c8>)
 80016e0:	5ccb      	ldrb	r3, [r1, r3]
 80016e2:	fa22 f303 	lsr.w	r3, r2, r3
 80016e6:	4a09      	ldr	r2, [pc, #36]	@ (800170c <HAL_RCC_ClockConfig+0x1cc>)
 80016e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80016ea:	4b09      	ldr	r3, [pc, #36]	@ (8001710 <HAL_RCC_ClockConfig+0x1d0>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7ff f9bc 	bl	8000a6c <HAL_InitTick>

  return HAL_OK;
 80016f4:	2300      	movs	r3, #0
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3710      	adds	r7, #16
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	40022000 	.word	0x40022000
 8001704:	40021000 	.word	0x40021000
 8001708:	08001868 	.word	0x08001868
 800170c:	20000000 	.word	0x20000000
 8001710:	20000004 	.word	0x20000004

08001714 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001714:	b480      	push	{r7}
 8001716:	b087      	sub	sp, #28
 8001718:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800171a:	2300      	movs	r3, #0
 800171c:	60fb      	str	r3, [r7, #12]
 800171e:	2300      	movs	r3, #0
 8001720:	60bb      	str	r3, [r7, #8]
 8001722:	2300      	movs	r3, #0
 8001724:	617b      	str	r3, [r7, #20]
 8001726:	2300      	movs	r3, #0
 8001728:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800172a:	2300      	movs	r3, #0
 800172c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800172e:	4b1e      	ldr	r3, [pc, #120]	@ (80017a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	f003 030c 	and.w	r3, r3, #12
 800173a:	2b04      	cmp	r3, #4
 800173c:	d002      	beq.n	8001744 <HAL_RCC_GetSysClockFreq+0x30>
 800173e:	2b08      	cmp	r3, #8
 8001740:	d003      	beq.n	800174a <HAL_RCC_GetSysClockFreq+0x36>
 8001742:	e027      	b.n	8001794 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001744:	4b19      	ldr	r3, [pc, #100]	@ (80017ac <HAL_RCC_GetSysClockFreq+0x98>)
 8001746:	613b      	str	r3, [r7, #16]
      break;
 8001748:	e027      	b.n	800179a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	0c9b      	lsrs	r3, r3, #18
 800174e:	f003 030f 	and.w	r3, r3, #15
 8001752:	4a17      	ldr	r2, [pc, #92]	@ (80017b0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001754:	5cd3      	ldrb	r3, [r2, r3]
 8001756:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800175e:	2b00      	cmp	r3, #0
 8001760:	d010      	beq.n	8001784 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001762:	4b11      	ldr	r3, [pc, #68]	@ (80017a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	0c5b      	lsrs	r3, r3, #17
 8001768:	f003 0301 	and.w	r3, r3, #1
 800176c:	4a11      	ldr	r2, [pc, #68]	@ (80017b4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800176e:	5cd3      	ldrb	r3, [r2, r3]
 8001770:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4a0d      	ldr	r2, [pc, #52]	@ (80017ac <HAL_RCC_GetSysClockFreq+0x98>)
 8001776:	fb03 f202 	mul.w	r2, r3, r2
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001780:	617b      	str	r3, [r7, #20]
 8001782:	e004      	b.n	800178e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	4a0c      	ldr	r2, [pc, #48]	@ (80017b8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001788:	fb02 f303 	mul.w	r3, r2, r3
 800178c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	613b      	str	r3, [r7, #16]
      break;
 8001792:	e002      	b.n	800179a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001794:	4b05      	ldr	r3, [pc, #20]	@ (80017ac <HAL_RCC_GetSysClockFreq+0x98>)
 8001796:	613b      	str	r3, [r7, #16]
      break;
 8001798:	bf00      	nop
    }
  }
  return sysclockfreq;
 800179a:	693b      	ldr	r3, [r7, #16]
}
 800179c:	4618      	mov	r0, r3
 800179e:	371c      	adds	r7, #28
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bc80      	pop	{r7}
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	40021000 	.word	0x40021000
 80017ac:	007a1200 	.word	0x007a1200
 80017b0:	08001878 	.word	0x08001878
 80017b4:	08001888 	.word	0x08001888
 80017b8:	003d0900 	.word	0x003d0900

080017bc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80017bc:	b480      	push	{r7}
 80017be:	b085      	sub	sp, #20
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80017c4:	4b0a      	ldr	r3, [pc, #40]	@ (80017f0 <RCC_Delay+0x34>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a0a      	ldr	r2, [pc, #40]	@ (80017f4 <RCC_Delay+0x38>)
 80017ca:	fba2 2303 	umull	r2, r3, r2, r3
 80017ce:	0a5b      	lsrs	r3, r3, #9
 80017d0:	687a      	ldr	r2, [r7, #4]
 80017d2:	fb02 f303 	mul.w	r3, r2, r3
 80017d6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80017d8:	bf00      	nop
  }
  while (Delay --);
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	1e5a      	subs	r2, r3, #1
 80017de:	60fa      	str	r2, [r7, #12]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d1f9      	bne.n	80017d8 <RCC_Delay+0x1c>
}
 80017e4:	bf00      	nop
 80017e6:	bf00      	nop
 80017e8:	3714      	adds	r7, #20
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bc80      	pop	{r7}
 80017ee:	4770      	bx	lr
 80017f0:	20000000 	.word	0x20000000
 80017f4:	10624dd3 	.word	0x10624dd3

080017f8 <memset>:
 80017f8:	4603      	mov	r3, r0
 80017fa:	4402      	add	r2, r0
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d100      	bne.n	8001802 <memset+0xa>
 8001800:	4770      	bx	lr
 8001802:	f803 1b01 	strb.w	r1, [r3], #1
 8001806:	e7f9      	b.n	80017fc <memset+0x4>

08001808 <__libc_init_array>:
 8001808:	b570      	push	{r4, r5, r6, lr}
 800180a:	2600      	movs	r6, #0
 800180c:	4d0c      	ldr	r5, [pc, #48]	@ (8001840 <__libc_init_array+0x38>)
 800180e:	4c0d      	ldr	r4, [pc, #52]	@ (8001844 <__libc_init_array+0x3c>)
 8001810:	1b64      	subs	r4, r4, r5
 8001812:	10a4      	asrs	r4, r4, #2
 8001814:	42a6      	cmp	r6, r4
 8001816:	d109      	bne.n	800182c <__libc_init_array+0x24>
 8001818:	f000 f81a 	bl	8001850 <_init>
 800181c:	2600      	movs	r6, #0
 800181e:	4d0a      	ldr	r5, [pc, #40]	@ (8001848 <__libc_init_array+0x40>)
 8001820:	4c0a      	ldr	r4, [pc, #40]	@ (800184c <__libc_init_array+0x44>)
 8001822:	1b64      	subs	r4, r4, r5
 8001824:	10a4      	asrs	r4, r4, #2
 8001826:	42a6      	cmp	r6, r4
 8001828:	d105      	bne.n	8001836 <__libc_init_array+0x2e>
 800182a:	bd70      	pop	{r4, r5, r6, pc}
 800182c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001830:	4798      	blx	r3
 8001832:	3601      	adds	r6, #1
 8001834:	e7ee      	b.n	8001814 <__libc_init_array+0xc>
 8001836:	f855 3b04 	ldr.w	r3, [r5], #4
 800183a:	4798      	blx	r3
 800183c:	3601      	adds	r6, #1
 800183e:	e7f2      	b.n	8001826 <__libc_init_array+0x1e>
 8001840:	0800188c 	.word	0x0800188c
 8001844:	0800188c 	.word	0x0800188c
 8001848:	0800188c 	.word	0x0800188c
 800184c:	08001890 	.word	0x08001890

08001850 <_init>:
 8001850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001852:	bf00      	nop
 8001854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001856:	bc08      	pop	{r3}
 8001858:	469e      	mov	lr, r3
 800185a:	4770      	bx	lr

0800185c <_fini>:
 800185c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800185e:	bf00      	nop
 8001860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001862:	bc08      	pop	{r3}
 8001864:	469e      	mov	lr, r3
 8001866:	4770      	bx	lr
